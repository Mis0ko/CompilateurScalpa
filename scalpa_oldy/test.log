-e tests/01_empty.txt

//int main() {
//}

==40250== Memcheck, a memory error detector
==40250== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40250== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40250== Command: ./binary/scalpa tests/01_empty.txt tests/01_empty.asm
==40250== 
[Yacc] error: syntax error
Reading from tests/01_empty.txt.
Output will be saved to tests/01_empty.asm.
///////////////////
// Symbol Table
///////////////////
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40250== 
==40250== HEAP SUMMARY:
==40250==     in use at exit: 0 bytes in 0 blocks
==40250==   total heap usage: 8 allocs, 8 frees, 29,690 bytes allocated
==40250== 
==40250== All heap blocks were freed -- no leaks are possible
==40250== 
==40250== For lists of detected and suppressed errors, rerun with: -s
==40250== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
.text
main:
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/02_print_hello_world.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

//int main() {
  //printf("Hello, world");
//}

==40257== Memcheck, a memory error detector
==40257== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40257== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40257== Command: ./binary/scalpa tests/02_print_hello_world.txt tests/02_print_hello_world.asm
==40257== 
[Yacc] error: syntax error
Reading from tests/02_print_hello_world.txt.
Output will be saved to tests/02_print_hello_world.asm.
///////////////////
// Symbol Table
///////////////////
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40257== 
==40257== HEAP SUMMARY:
==40257==     in use at exit: 0 bytes in 0 blocks
==40257==   total heap usage: 8 allocs, 8 frees, 29,690 bytes allocated
==40257== 
==40257== All heap blocks were freed -- no leaks are possible
==40257== 
==40257== For lists of detected and suppressed errors, rerun with: -s
==40257== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
.text
main:
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/03_print_int_42.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 42

//int main() {
  int val;
  val = 42;
  printi(val);
  //printf("\n");
//}

==40265== Memcheck, a memory error detector
==40265== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40265== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40265== Command: ./binary/scalpa tests/03_print_int_42.txt tests/03_print_int_42.asm
==40265== 
Reading from tests/03_print_int_42.txt.
Output will be saved to tests/03_print_int_42.asm.
///////////////////
// Symbol Table
///////////////////
     val   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 42
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:   val, right: CONST_1
id:    1, PRINTI   val
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40265== 
==40265== HEAP SUMMARY:
==40265==     in use at exit: 0 bytes in 0 blocks
==40265==   total heap usage: 19 allocs, 19 frees, 29,906 bytes allocated
==40265== 
==40265== All heap blocks were freed -- no leaks are possible
==40265== 
==40265== For lists of detected and suppressed errors, rerun with: -s
==40265== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_val_:	.word 0
PTC_CONST_1_:	.word 42
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_val_
LABEL_Q_1:
    li $v0, 1
    lw $a0, PTC_val_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/04_arithmetic_basic.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 42

//int main() {
  int a;
  int b;
  int c;
  int d;
  a = 30;
  b = 10;
  c = a + b;
  d = c + 2;
  printi(d);
  //printf("\n");
//}

==40271== Memcheck, a memory error detector
==40271== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40271== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40271== Command: ./binary/scalpa tests/04_arithmetic_basic.txt tests/04_arithmetic_basic.asm
==40271== 
Reading from tests/04_arithmetic_basic.txt.
Output will be saved to tests/04_arithmetic_basic.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
       c   |   SYMBOL_INT
       d   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 30
 CONST_3   |   SYMBOL_CST = 10
  TEMP_1   |   SYMBOL_INT
 CONST_5   |   SYMBOL_CST = 2
  TEMP_3   |   SYMBOL_INT
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: =, res:     b, right: CONST_3
id:    2, operator: +, res: TEMP_1, left:     a, right:     b
id:    3, operator: =, res:     c, right: TEMP_1
id:    4, operator: +, res: TEMP_3, left:     c, right: CONST_5
id:    5, operator: =, res:     d, right: TEMP_3
id:    6, PRINTI     d
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40271== 
==40271== HEAP SUMMARY:
==40271==     in use at exit: 0 bytes in 0 blocks
==40271==   total heap usage: 52 allocs, 52 frees, 30,480 bytes allocated
==40271== 
==40271== All heap blocks were freed -- no leaks are possible
==40271== 
==40271== For lists of detected and suppressed errors, rerun with: -s
==40271== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_c_:	.word 0
PTC_d_:	.word 0
PTC_CONST_1_:	.word 30
PTC_CONST_3_:	.word 10
PTC_TEMP_1_:	.word 0
PTC_CONST_5_:	.word 2
PTC_TEMP_3_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_2:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_3:
    lw $t0, PTC_TEMP_1_
    sw $t0, PTC_c_
LABEL_Q_4:
    lw $t0, PTC_c_
    lw $t1, PTC_CONST_5_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_3_
LABEL_Q_5:
    lw $t0, PTC_TEMP_3_
    sw $t0, PTC_d_
LABEL_Q_6:
    li $v0, 1
    lw $a0, PTC_d_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/05_arithmetic_simple.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 42

//int main() {
  int a;
  int b;
  int c;
  a = 30;
  b = 10;
  c = a + b + 2;
  printi(c);
  //printf("\n");
//}

==40277== Memcheck, a memory error detector
==40277== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40277== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40277== Command: ./binary/scalpa tests/05_arithmetic_simple.txt tests/05_arithmetic_simple.asm
==40277== 
Reading from tests/05_arithmetic_simple.txt.
Output will be saved to tests/05_arithmetic_simple.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
       c   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 30
 CONST_3   |   SYMBOL_CST = 10
  TEMP_1   |   SYMBOL_INT
 CONST_5   |   SYMBOL_CST = 2
  TEMP_3   |   SYMBOL_INT
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: =, res:     b, right: CONST_3
id:    2, operator: +, res: TEMP_1, left:     a, right:     b
id:    3, operator: +, res: TEMP_3, left: TEMP_1, right: CONST_5
id:    4, operator: =, res:     c, right: TEMP_3
id:    5, PRINTI     c
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40277== 
==40277== HEAP SUMMARY:
==40277==     in use at exit: 0 bytes in 0 blocks
==40277==   total heap usage: 45 allocs, 45 frees, 30,376 bytes allocated
==40277== 
==40277== All heap blocks were freed -- no leaks are possible
==40277== 
==40277== For lists of detected and suppressed errors, rerun with: -s
==40277== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_c_:	.word 0
PTC_CONST_1_:	.word 30
PTC_CONST_3_:	.word 10
PTC_TEMP_1_:	.word 0
PTC_CONST_5_:	.word 2
PTC_TEMP_3_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_2:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_3:
    lw $t0, PTC_TEMP_1_
    lw $t1, PTC_CONST_5_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_3_
LABEL_Q_4:
    lw $t0, PTC_TEMP_3_
    sw $t0, PTC_c_
LABEL_Q_5:
    li $v0, 1
    lw $a0, PTC_c_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/06_arithmetic_medium.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 42

//int main() {
  int a;
  int b;
  int c;
  a = 50;
  b = -10; // Unaire mal géré en assembleur
  //b = 0 - 10;
  int e = 2*1;
  c = a + b + 2 * 1;
  printi(c);
  //printf("\n");
//}

==40283== Memcheck, a memory error detector
==40283== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40283== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40283== Command: ./binary/scalpa tests/06_arithmetic_medium.txt tests/06_arithmetic_medium.asm
==40283== 
Reading from tests/06_arithmetic_medium.txt.
Output will be saved to tests/06_arithmetic_medium.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
       c   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 50
 CONST_3   |   SYMBOL_CST = 10
  TEMP_1   |   SYMBOL_INT
 CONST_5   |   SYMBOL_CST = 2
 CONST_7   |   SYMBOL_CST = 1
  TEMP_3   |   SYMBOL_INT
       e   |   SYMBOL_INT
  TEMP_5   |   SYMBOL_INT
 CONST_9   |   SYMBOL_CST = 2
CONST_11   |   SYMBOL_CST = 1
  TEMP_7   |   SYMBOL_INT
  TEMP_9   |   SYMBOL_INT
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: -, res: TEMP_1, right: CONST_3
id:    2, operator: =, res:     b, right: TEMP_1
id:    3, operator: *, res: TEMP_3, left: CONST_5, right: CONST_7
id:    4, operator: =, res:     e, right: TEMP_3
id:    5, operator: +, res: TEMP_5, left:     a, right:     b
id:    6, operator: *, res: TEMP_7, left: CONST_9, right: CONST_11
id:    7, operator: +, res: TEMP_9, left: TEMP_5, right: TEMP_7
id:    8, operator: =, res:     c, right: TEMP_9
id:    9, PRINTI     c
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40283== 
==40283== HEAP SUMMARY:
==40283==     in use at exit: 0 bytes in 0 blocks
==40283==   total heap usage: 68 allocs, 68 frees, 30,882 bytes allocated
==40283== 
==40283== All heap blocks were freed -- no leaks are possible
==40283== 
==40283== For lists of detected and suppressed errors, rerun with: -s
==40283== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_c_:	.word 0
PTC_CONST_1_:	.word 50
PTC_CONST_3_:	.word 10
PTC_TEMP_1_:	.word 0
PTC_CONST_5_:	.word 2
PTC_CONST_7_:	.word 1
PTC_TEMP_3_:	.word 0
PTC_e_:	.word 0
PTC_TEMP_5_:	.word 0
PTC_CONST_9_:	.word 2
PTC_CONST_11_:	.word 1
PTC_TEMP_7_:	.word 0
PTC_TEMP_9_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    li $t0, 0
    lw $t1, PTC_CONST_3_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_2:
    lw $t0, PTC_TEMP_1_
    sw $t0, PTC_b_
LABEL_Q_3:
    lw $t0, PTC_CONST_5_
    lw $t1, PTC_CONST_7_
    mult $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_3_
LABEL_Q_4:
    lw $t0, PTC_TEMP_3_
    sw $t0, PTC_e_
LABEL_Q_5:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_5_
LABEL_Q_6:
    lw $t0, PTC_CONST_9_
    lw $t1, PTC_CONST_11_
    mult $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_7_
LABEL_Q_7:
    lw $t0, PTC_TEMP_5_
    lw $t1, PTC_TEMP_7_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_9_
LABEL_Q_8:
    lw $t0, PTC_TEMP_9_
    sw $t0, PTC_c_
LABEL_Q_9:
    li $v0, 1
    lw $a0, PTC_c_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/07_arithmetic_complex.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 42

//int main() {
  int a;
  int b;
  int c;
  int d;
  a = 40;
  b = 10;
  c = 2;
  d = (a + b / 1 / c) - 3; 
  printi(d);
  //printf("\n");
//}

==40289== Memcheck, a memory error detector
==40289== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40289== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40289== Command: ./binary/scalpa tests/07_arithmetic_complex.txt tests/07_arithmetic_complex.asm
==40289== 
Reading from tests/07_arithmetic_complex.txt.
Output will be saved to tests/07_arithmetic_complex.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
       c   |   SYMBOL_INT
       d   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 40
 CONST_3   |   SYMBOL_CST = 10
 CONST_5   |   SYMBOL_CST = 2
 CONST_7   |   SYMBOL_CST = 1
  TEMP_1   |   SYMBOL_INT
  TEMP_3   |   SYMBOL_INT
  TEMP_5   |   SYMBOL_INT
 CONST_9   |   SYMBOL_CST = 3
  TEMP_7   |   SYMBOL_INT
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: =, res:     b, right: CONST_3
id:    2, operator: =, res:     c, right: CONST_5
id:    3, operator: /, res: TEMP_1, left:     b, right: CONST_7
id:    4, operator: /, res: TEMP_3, left: TEMP_1, right:     c
id:    5, operator: +, res: TEMP_5, left:     a, right: TEMP_3
id:    6, operator: -, res: TEMP_7, left: TEMP_5, right: CONST_9
id:    7, operator: =, res:     d, right: TEMP_7
id:    8, PRINTI     d
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40289== 
==40289== HEAP SUMMARY:
==40289==     in use at exit: 0 bytes in 0 blocks
==40289==   total heap usage: 64 allocs, 64 frees, 30,750 bytes allocated
==40289== 
==40289== All heap blocks were freed -- no leaks are possible
==40289== 
==40289== For lists of detected and suppressed errors, rerun with: -s
==40289== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_c_:	.word 0
PTC_d_:	.word 0
PTC_CONST_1_:	.word 40
PTC_CONST_3_:	.word 10
PTC_CONST_5_:	.word 2
PTC_CONST_7_:	.word 1
PTC_TEMP_1_:	.word 0
PTC_TEMP_3_:	.word 0
PTC_TEMP_5_:	.word 0
PTC_CONST_9_:	.word 3
PTC_TEMP_7_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_2:
    lw $t0, PTC_CONST_5_
    sw $t0, PTC_c_
LABEL_Q_3:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_7_
    div $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_1_
LABEL_Q_4:
    lw $t0, PTC_TEMP_1_
    lw $t1, PTC_c_
    div $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_3_
LABEL_Q_5:
    lw $t0, PTC_a_
    lw $t1, PTC_TEMP_3_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_5_
LABEL_Q_6:
    lw $t0, PTC_TEMP_5_
    lw $t1, PTC_CONST_9_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_7_
LABEL_Q_7:
    lw $t0, PTC_TEMP_7_
    sw $t0, PTC_d_
LABEL_Q_8:
    li $v0, 1
    lw $a0, PTC_d_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/08_if_basic.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

//int main() {
  int a;
  int b;
  a = 40;
  b = 10;
  if (a == b) {
    printi(0);
  }
  printi(1);
//}

==40297== Memcheck, a memory error detector
==40297== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40297== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40297== Command: ./binary/scalpa tests/08_if_basic.txt tests/08_if_basic.asm
==40297== 
Reading from tests/08_if_basic.txt.
Output will be saved to tests/08_if_basic.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 40
 CONST_3   |   SYMBOL_CST = 10
 CONST_5   |   SYMBOL_CST = 0
 CONST_7   |   SYMBOL_CST = 1
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: =, res:     b, right: CONST_3
id:    2, IF     a ==     b -> Goto -> QUAD     4
id:    3, Goto -> QUAD     5
id:    4, PRINTI CONST_5
id:    5, PRINTI CONST_7
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40297== 
==40297== HEAP SUMMARY:
==40297==     in use at exit: 0 bytes in 0 blocks
==40297==   total heap usage: 41 allocs, 41 frees, 30,386 bytes allocated
==40297== 
==40297== All heap blocks were freed -- no leaks are possible
==40297== 
==40297== For lists of detected and suppressed errors, rerun with: -s
==40297== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_CONST_1_:	.word 40
PTC_CONST_3_:	.word 10
PTC_CONST_5_:	.word 0
PTC_CONST_7_:	.word 1
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_2:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    beq $t0, $t1, LABEL_Q_4
LABEL_Q_3:
    j LABEL_Q_5
LABEL_Q_4:
    li $v0, 1
    lw $a0, PTC_CONST_5_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_5:
    li $v0, 1
    lw $a0, PTC_CONST_7_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/09_if_short_circuit.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

//int main() {
  int a;
  int b;
  a = 40;
  b = 10;
  if ((a == b) || (a < b) && (a*b > 0)) {
    printi(0);
  }
  printi(1);
//}

==40307== Memcheck, a memory error detector
==40307== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40307== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40307== Command: ./binary/scalpa tests/09_if_short_circuit.txt tests/09_if_short_circuit.asm
==40307== 
Reading from tests/09_if_short_circuit.txt.
Output will be saved to tests/09_if_short_circuit.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 40
 CONST_3   |   SYMBOL_CST = 10
  TEMP_1   |   SYMBOL_INT
 CONST_5   |   SYMBOL_CST = 0
 CONST_7   |   SYMBOL_CST = 0
 CONST_9   |   SYMBOL_CST = 1
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: =, res:     b, right: CONST_3
id:    2, IF     a ==     b -> Goto -> QUAD     9
id:    3, Goto -> QUAD     4
id:    4, IF     a <     b -> Goto -> QUAD     6
id:    5, Goto -> QUAD    10
id:    6, operator: *, res: TEMP_1, left:     a, right:     b
id:    7, IF TEMP_1 > CONST_5 -> Goto -> QUAD     9
id:    8, Goto -> QUAD    10
id:    9, PRINTI CONST_7
id:   10, PRINTI CONST_9
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40307== 
==40307== HEAP SUMMARY:
==40307==     in use at exit: 0 bytes in 0 blocks
==40307==   total heap usage: 68 allocs, 68 frees, 31,033 bytes allocated
==40307== 
==40307== All heap blocks were freed -- no leaks are possible
==40307== 
==40307== For lists of detected and suppressed errors, rerun with: -s
==40307== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_CONST_1_:	.word 40
PTC_CONST_3_:	.word 10
PTC_TEMP_1_:	.word 0
PTC_CONST_5_:	.word 0
PTC_CONST_7_:	.word 0
PTC_CONST_9_:	.word 1
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_2:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    beq $t0, $t1, LABEL_Q_9
LABEL_Q_3:
    j LABEL_Q_4
LABEL_Q_4:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_6
LABEL_Q_5:
    j LABEL_Q_10
LABEL_Q_6:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    mult $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_1_
LABEL_Q_7:
    lw $t0, PTC_TEMP_1_
    lw $t1, PTC_CONST_5_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_9
LABEL_Q_8:
    j LABEL_Q_10
LABEL_Q_9:
    li $v0, 1
    lw $a0, PTC_CONST_7_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_10:
    li $v0, 1
    lw $a0, PTC_CONST_9_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/10_if_else.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// -3

//int main() {
  int a;
  int b;
  int c;
  a = -15;
  b = 5;
  c = -2 * a;
  if ((a == b) || (a > b)) {
    b = b - 5;
    c = b - a;
    c = c - 2;
  } else {
    b = b + 5;
    c = b + a;
    c = c + 2; 
  }
  printi(c);
  //printf("\n");
//}

==40312== Memcheck, a memory error detector
==40312== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40312== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40312== Command: ./binary/scalpa tests/10_if_else.txt tests/10_if_else.asm
==40312== 
Reading from tests/10_if_else.txt.
Output will be saved to tests/10_if_else.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
       c   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 15
  TEMP_1   |   SYMBOL_INT
 CONST_3   |   SYMBOL_CST = 5
 CONST_5   |   SYMBOL_CST = 2
  TEMP_3   |   SYMBOL_INT
  TEMP_5   |   SYMBOL_INT
 CONST_7   |   SYMBOL_CST = 5
  TEMP_7   |   SYMBOL_INT
  TEMP_9   |   SYMBOL_INT
 CONST_9   |   SYMBOL_CST = 2
 TEMP_11   |   SYMBOL_INT
CONST_11   |   SYMBOL_CST = 5
 TEMP_13   |   SYMBOL_INT
 TEMP_15   |   SYMBOL_INT
CONST_13   |   SYMBOL_CST = 2
 TEMP_17   |   SYMBOL_INT
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: -, res: TEMP_1, right: CONST_1
id:    1, operator: =, res:     a, right: TEMP_1
id:    2, operator: =, res:     b, right: CONST_3
id:    3, operator: *, res: TEMP_3, left: CONST_5, right:     a
id:    4, operator: -, res: TEMP_5, right: TEMP_3
id:    5, operator: =, res:     c, right: TEMP_5
id:    6, IF     a ==     b -> Goto -> QUAD    10
id:    7, Goto -> QUAD     8
id:    8, IF     a >     b -> Goto -> QUAD    10
id:    9, Goto -> QUAD    17
id:   10, operator: -, res: TEMP_7, left:     b, right: CONST_7
id:   11, operator: =, res:     b, right: TEMP_7
id:   12, operator: -, res: TEMP_9, left:     b, right:     a
id:   13, operator: =, res:     c, right: TEMP_9
id:   14, operator: -, res: TEMP_11, left:     c, right: CONST_9
id:   15, operator: =, res:     c, right: TEMP_11
id:   16, Goto -> QUAD    23
id:   17, operator: +, res: TEMP_13, left:     b, right: CONST_11
id:   18, operator: =, res:     b, right: TEMP_13
id:   19, operator: +, res: TEMP_15, left:     b, right:     a
id:   20, operator: =, res:     c, right: TEMP_15
id:   21, operator: +, res: TEMP_17, left:     c, right: CONST_13
id:   22, operator: =, res:     c, right: TEMP_17
id:   23, PRINTI     c
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40312== 
==40312== HEAP SUMMARY:
==40312==     in use at exit: 0 bytes in 0 blocks
==40312==   total heap usage: 127 allocs, 127 frees, 32,225 bytes allocated
==40312== 
==40312== All heap blocks were freed -- no leaks are possible
==40312== 
==40312== For lists of detected and suppressed errors, rerun with: -s
==40312== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_c_:	.word 0
PTC_CONST_1_:	.word 15
PTC_TEMP_1_:	.word 0
PTC_CONST_3_:	.word 5
PTC_CONST_5_:	.word 2
PTC_TEMP_3_:	.word 0
PTC_TEMP_5_:	.word 0
PTC_CONST_7_:	.word 5
PTC_TEMP_7_:	.word 0
PTC_TEMP_9_:	.word 0
PTC_CONST_9_:	.word 2
PTC_TEMP_11_:	.word 0
PTC_CONST_11_:	.word 5
PTC_TEMP_13_:	.word 0
PTC_TEMP_15_:	.word 0
PTC_CONST_13_:	.word 2
PTC_TEMP_17_:	.word 0
.text
main:
LABEL_Q_0:
    li $t0, 0
    lw $t1, PTC_CONST_1_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_1:
    lw $t0, PTC_TEMP_1_
    sw $t0, PTC_a_
LABEL_Q_2:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_3:
    lw $t0, PTC_CONST_5_
    lw $t1, PTC_a_
    mult $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_3_
LABEL_Q_4:
    li $t0, 0
    lw $t1, PTC_TEMP_3_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_5_
LABEL_Q_5:
    lw $t0, PTC_TEMP_5_
    sw $t0, PTC_c_
LABEL_Q_6:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    beq $t0, $t1, LABEL_Q_10
LABEL_Q_7:
    j LABEL_Q_8
LABEL_Q_8:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_10
LABEL_Q_9:
    j LABEL_Q_17
LABEL_Q_10:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_7_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_7_
LABEL_Q_11:
    lw $t0, PTC_TEMP_7_
    sw $t0, PTC_b_
LABEL_Q_12:
    lw $t0, PTC_b_
    lw $t1, PTC_a_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_9_
LABEL_Q_13:
    lw $t0, PTC_TEMP_9_
    sw $t0, PTC_c_
LABEL_Q_14:
    lw $t0, PTC_c_
    lw $t1, PTC_CONST_9_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_11_
LABEL_Q_15:
    lw $t0, PTC_TEMP_11_
    sw $t0, PTC_c_
LABEL_Q_16:
    j LABEL_Q_23
LABEL_Q_17:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_11_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_13_
LABEL_Q_18:
    lw $t0, PTC_TEMP_13_
    sw $t0, PTC_b_
LABEL_Q_19:
    lw $t0, PTC_b_
    lw $t1, PTC_a_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_15_
LABEL_Q_20:
    lw $t0, PTC_TEMP_15_
    sw $t0, PTC_c_
LABEL_Q_21:
    lw $t0, PTC_c_
    lw $t1, PTC_CONST_13_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_17_
LABEL_Q_22:
    lw $t0, PTC_TEMP_17_
    sw $t0, PTC_c_
LABEL_Q_23:
    li $v0, 1
    lw $a0, PTC_c_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/11_if_nested.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 42

//int main() {
  int big;
  int medium;
  int little;
  big = 100;
  medium = 10;
  little = 1;

  if (big > medium) {
    if (medium < little) {
     little = 2;
    } else {
      little = 42;
    }
  } else {
    little = 3;
  }

  printi(little);
  //printf("\n");
//}

==40318== Memcheck, a memory error detector
==40318== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40318== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40318== Command: ./binary/scalpa tests/11_if_nested.txt tests/11_if_nested.asm
==40318== 
Reading from tests/11_if_nested.txt.
Output will be saved to tests/11_if_nested.asm.
///////////////////
// Symbol Table
///////////////////
     big   |   SYMBOL_INT
  medium   |   SYMBOL_INT
  little   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 100
 CONST_3   |   SYMBOL_CST = 10
 CONST_5   |   SYMBOL_CST = 1
 CONST_7   |   SYMBOL_CST = 2
 CONST_9   |   SYMBOL_CST = 42
CONST_11   |   SYMBOL_CST = 3
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:   big, right: CONST_1
id:    1, operator: =, res: medium, right: CONST_3
id:    2, operator: =, res: little, right: CONST_5
id:    3, IF   big > medium -> Goto -> QUAD     5
id:    4, Goto -> QUAD    11
id:    5, IF medium < little -> Goto -> QUAD     7
id:    6, Goto -> QUAD     9
id:    7, operator: =, res: little, right: CONST_7
id:    8, Goto -> QUAD    12
id:    9, operator: =, res: little, right: CONST_9
id:   10, Goto -> QUAD    12
id:   11, operator: =, res: little, right: CONST_11
id:   12, PRINTI little
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40318== 
==40318== HEAP SUMMARY:
==40318==     in use at exit: 0 bytes in 0 blocks
==40318==   total heap usage: 74 allocs, 74 frees, 31,190 bytes allocated
==40318== 
==40318== All heap blocks were freed -- no leaks are possible
==40318== 
==40318== For lists of detected and suppressed errors, rerun with: -s
==40318== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_big_:	.word 0
PTC_medium_:	.word 0
PTC_little_:	.word 0
PTC_CONST_1_:	.word 100
PTC_CONST_3_:	.word 10
PTC_CONST_5_:	.word 1
PTC_CONST_7_:	.word 2
PTC_CONST_9_:	.word 42
PTC_CONST_11_:	.word 3
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_big_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_medium_
LABEL_Q_2:
    lw $t0, PTC_CONST_5_
    sw $t0, PTC_little_
LABEL_Q_3:
    lw $t0, PTC_big_
    lw $t1, PTC_medium_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_5
LABEL_Q_4:
    j LABEL_Q_11
LABEL_Q_5:
    lw $t0, PTC_medium_
    lw $t1, PTC_little_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_7
LABEL_Q_6:
    j LABEL_Q_9
LABEL_Q_7:
    lw $t0, PTC_CONST_7_
    sw $t0, PTC_little_
LABEL_Q_8:
    j LABEL_Q_12
LABEL_Q_9:
    lw $t0, PTC_CONST_9_
    sw $t0, PTC_little_
LABEL_Q_10:
    j LABEL_Q_12
LABEL_Q_11:
    lw $t0, PTC_CONST_11_
    sw $t0, PTC_little_
LABEL_Q_12:
    li $v0, 1
    lw $a0, PTC_little_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/12_while.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// -55
// 55

//int main() {
  int a;
  int b;
  int c;
  int d;
  int e;
  a = 1;
  b = 2;
  c = -2;
  d = 54;
  e = 1;
  while (e != 0) {
    c = c + 1;
    b = b - 1;
    if (c > d)
      e = 0;
  }
  printi(b);
  //printf("\n");
  printi(c);
  //printf("\n");
//}

==40323== Memcheck, a memory error detector
==40323== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40323== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40323== Command: ./binary/scalpa tests/12_while.txt tests/12_while.asm
==40323== 
Reading from tests/12_while.txt.
Output will be saved to tests/12_while.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
       c   |   SYMBOL_INT
       d   |   SYMBOL_INT
       e   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 1
 CONST_3   |   SYMBOL_CST = 2
 CONST_5   |   SYMBOL_CST = 2
  TEMP_1   |   SYMBOL_INT
 CONST_7   |   SYMBOL_CST = 54
 CONST_9   |   SYMBOL_CST = 1
CONST_11   |   SYMBOL_CST = 0
CONST_13   |   SYMBOL_CST = 1
  TEMP_3   |   SYMBOL_INT
CONST_15   |   SYMBOL_CST = 1
  TEMP_5   |   SYMBOL_INT
CONST_17   |   SYMBOL_CST = 0
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: =, res:     b, right: CONST_3
id:    2, operator: -, res: TEMP_1, right: CONST_5
id:    3, operator: =, res:     c, right: TEMP_1
id:    4, operator: =, res:     d, right: CONST_7
id:    5, operator: =, res:     e, right: CONST_9
id:    6, IF     e != CONST_11 -> Goto -> QUAD     8
id:    7, Goto -> QUAD    16
id:    8, operator: +, res: TEMP_3, left:     c, right: CONST_13
id:    9, operator: =, res:     c, right: TEMP_3
id:   10, operator: -, res: TEMP_5, left:     b, right: CONST_15
id:   11, operator: =, res:     b, right: TEMP_5
id:   12, IF     c >     d -> Goto -> QUAD    14
id:   13, Goto -> QUAD     6
id:   14, operator: =, res:     e, right: CONST_17
id:   15, Goto -> QUAD     6
id:   16, PRINTI     b
id:   17, PRINTI     c
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40323== 
==40323== HEAP SUMMARY:
==40323==     in use at exit: 0 bytes in 0 blocks
==40323==   total heap usage: 103 allocs, 103 frees, 31,661 bytes allocated
==40323== 
==40323== All heap blocks were freed -- no leaks are possible
==40323== 
==40323== For lists of detected and suppressed errors, rerun with: -s
==40323== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_c_:	.word 0
PTC_d_:	.word 0
PTC_e_:	.word 0
PTC_CONST_1_:	.word 1
PTC_CONST_3_:	.word 2
PTC_CONST_5_:	.word 2
PTC_TEMP_1_:	.word 0
PTC_CONST_7_:	.word 54
PTC_CONST_9_:	.word 1
PTC_CONST_11_:	.word 0
PTC_CONST_13_:	.word 1
PTC_TEMP_3_:	.word 0
PTC_CONST_15_:	.word 1
PTC_TEMP_5_:	.word 0
PTC_CONST_17_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_2:
    li $t0, 0
    lw $t1, PTC_CONST_5_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_3:
    lw $t0, PTC_TEMP_1_
    sw $t0, PTC_c_
LABEL_Q_4:
    lw $t0, PTC_CONST_7_
    sw $t0, PTC_d_
LABEL_Q_5:
    lw $t0, PTC_CONST_9_
    sw $t0, PTC_e_
LABEL_Q_6:
    lw $t0, PTC_e_
    lw $t1, PTC_CONST_11_
    bne $t0, $t1, LABEL_Q_8
LABEL_Q_7:
    j LABEL_Q_16
LABEL_Q_8:
    lw $t0, PTC_c_
    lw $t1, PTC_CONST_13_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_3_
LABEL_Q_9:
    lw $t0, PTC_TEMP_3_
    sw $t0, PTC_c_
LABEL_Q_10:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_15_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_5_
LABEL_Q_11:
    lw $t0, PTC_TEMP_5_
    sw $t0, PTC_b_
LABEL_Q_12:
    lw $t0, PTC_c_
    lw $t1, PTC_d_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_14
LABEL_Q_13:
    j LABEL_Q_6
LABEL_Q_14:
    lw $t0, PTC_CONST_17_
    sw $t0, PTC_e_
LABEL_Q_15:
    j LABEL_Q_6
LABEL_Q_16:
    li $v0, 1
    lw $a0, PTC_b_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_17:
    li $v0, 1
    lw $a0, PTC_c_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/13_while_while.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 0 40 41 42 1 40 41 42 

//int main() {
  int a;
  int b;
  int c;
  a = 0;
  b = 40;
  c = -2;
  while (a < 2) {
    printi(a);
    //printf(" ");
    while (b < 43) {
      printi(b);
      //printf(" ");
      b = b + 1;
    }
    a = a + 1;
    b = 40;
  }
  //printf("\n");
//}

==40329== Memcheck, a memory error detector
==40329== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40329== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40329== Command: ./binary/scalpa tests/13_while_while.txt tests/13_while_while.asm
==40329== 
Reading from tests/13_while_while.txt.
Output will be saved to tests/13_while_while.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
       c   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 0
 CONST_3   |   SYMBOL_CST = 40
 CONST_5   |   SYMBOL_CST = 2
  TEMP_1   |   SYMBOL_INT
 CONST_7   |   SYMBOL_CST = 2
 CONST_9   |   SYMBOL_CST = 43
CONST_11   |   SYMBOL_CST = 1
  TEMP_3   |   SYMBOL_INT
CONST_13   |   SYMBOL_CST = 1
  TEMP_5   |   SYMBOL_INT
CONST_15   |   SYMBOL_CST = 40
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: =, res:     b, right: CONST_3
id:    2, operator: -, res: TEMP_1, right: CONST_5
id:    3, operator: =, res:     c, right: TEMP_1
id:    4, IF     a < CONST_7 -> Goto -> QUAD     6
id:    5, Goto -> END
id:    6, PRINTI     a
id:    7, IF     b < CONST_9 -> Goto -> QUAD     9
id:    8, Goto -> QUAD    13
id:    9, PRINTI     b
id:   10, operator: +, res: TEMP_3, left:     b, right: CONST_11
id:   11, operator: =, res:     b, right: TEMP_3
id:   12, Goto -> QUAD     7
id:   13, operator: +, res: TEMP_5, left:     a, right: CONST_13
id:   14, operator: =, res:     a, right: TEMP_5
id:   15, operator: =, res:     b, right: CONST_15
id:   16, Goto -> QUAD     4
///////////////////
// end quad List
///////////////////
Cleaned 1 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40329== 
==40329== HEAP SUMMARY:
==40329==     in use at exit: 0 bytes in 0 blocks
==40329==   total heap usage: 89 allocs, 89 frees, 31,470 bytes allocated
==40329== 
==40329== All heap blocks were freed -- no leaks are possible
==40329== 
==40329== For lists of detected and suppressed errors, rerun with: -s
==40329== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_c_:	.word 0
PTC_CONST_1_:	.word 0
PTC_CONST_3_:	.word 40
PTC_CONST_5_:	.word 2
PTC_TEMP_1_:	.word 0
PTC_CONST_7_:	.word 2
PTC_CONST_9_:	.word 43
PTC_CONST_11_:	.word 1
PTC_TEMP_3_:	.word 0
PTC_CONST_13_:	.word 1
PTC_TEMP_5_:	.word 0
PTC_CONST_15_:	.word 40
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_2:
    li $t0, 0
    lw $t1, PTC_CONST_5_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_3:
    lw $t0, PTC_TEMP_1_
    sw $t0, PTC_c_
LABEL_Q_4:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_7_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_6
LABEL_Q_5:
    j LABEL_END
LABEL_Q_6:
    li $v0, 1
    lw $a0, PTC_a_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_7:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_9_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_9
LABEL_Q_8:
    j LABEL_Q_13
LABEL_Q_9:
    li $v0, 1
    lw $a0, PTC_b_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_10:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_11_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_3_
LABEL_Q_11:
    lw $t0, PTC_TEMP_3_
    sw $t0, PTC_b_
LABEL_Q_12:
    j LABEL_Q_7
LABEL_Q_13:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_13_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_5_
LABEL_Q_14:
    lw $t0, PTC_TEMP_5_
    sw $t0, PTC_a_
LABEL_Q_15:
    lw $t0, PTC_CONST_15_
    sw $t0, PTC_b_
LABEL_Q_16:
    j LABEL_Q_4
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/14_for.txt

#include <stdio.h>
#define printf(X) fprintf(stdout, "%s", (X))
#define printi(X) fprintf(stdout, "%d", (X))

// Result:
// 42

//int main() {
  int a;
  int i;
  a = 0;
  for (i = 0; i < 21; i = i + 1) {
    a = a + 3;
    a = a - 1;
  }
  printi(a);
  //printf("\n");
//}

==40334== Memcheck, a memory error detector
==40334== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40334== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40334== Command: ./binary/scalpa tests/14_for.txt tests/14_for.asm
==40334== 
ERROR: Trying to access undeclared variable: include
Reading from tests/14_for.txt.
Output will be saved to tests/14_for.asm.
Caractere inconnu: #
///////////////////
// Symbol Table
///////////////////
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40334== 
==40334== HEAP SUMMARY:
==40334==     in use at exit: 8 bytes in 1 blocks
==40334==   total heap usage: 9 allocs, 8 frees, 29,698 bytes allocated
==40334== 
==40334== LEAK SUMMARY:
==40334==    definitely lost: 8 bytes in 1 blocks
==40334==    indirectly lost: 0 bytes in 0 blocks
==40334==      possibly lost: 0 bytes in 0 blocks
==40334==    still reachable: 0 bytes in 0 blocks
==40334==         suppressed: 0 bytes in 0 blocks
==40334== Rerun with --leak-check=full to see details of leaked memory
==40334== 
==40334== For lists of detected and suppressed errors, rerun with: -s
==40334== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
.text
main:
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/15_array_1D.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

int main() {
  int a[10];
  int i;
  a[0] = 1;

  for(i = 1; i < 10; i = i + 1) {
    a[i] = a[i-1] * 2;
    printi(a[i]);
  }
}

==40340== Memcheck, a memory error detector
==40340== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40340== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40340== Command: ./binary/scalpa tests/15_array_1D.txt tests/15_array_1D.asm
==40340== 
[Yacc] error: syntax error
Reading from tests/15_array_1D.txt.
Output will be saved to tests/15_array_1D.asm.
///////////////////
// Symbol Table
///////////////////
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40340== 
==40340== HEAP SUMMARY:
==40340==     in use at exit: 5 bytes in 1 blocks
==40340==   total heap usage: 9 allocs, 8 frees, 29,695 bytes allocated
==40340== 
==40340== LEAK SUMMARY:
==40340==    definitely lost: 0 bytes in 0 blocks
==40340==    indirectly lost: 0 bytes in 0 blocks
==40340==      possibly lost: 0 bytes in 0 blocks
==40340==    still reachable: 5 bytes in 1 blocks
==40340==         suppressed: 0 bytes in 0 blocks
==40340== Rerun with --leak-check=full to see details of leaked memory
==40340== 
==40340== For lists of detected and suppressed errors, rerun with: -s
==40340== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
.text
main:
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/16_array_2D.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 1 
// 1 1 
// 1 2 1 
// 1 3 3 1 
// 1 4 6 4 1 
// 1 5 10 10 5 1 
// 1 6 15 20 15 6 1 
// 1 7 21 35 35 21 7 1 

int main() {
  int i, j;
  int pascal[8][8];

  for (i = 0; i < 8; i++) {
    for (j = 0; j <= i; j++) {
      if (i == j || j == 0)
        pascal[i][j] = 1;
      else
        pascal[i][j] = pascal[i-1][j] + pascal[i-1][j-1];
    }
  }

  for (i = 0; i < 8; i++) {
    for (j = 0; j <= i; j++) {
      printi((pascal[i][j]));
      printf(" ");
    }
    printf("\n");
  }
}

==40345== Memcheck, a memory error detector
==40345== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40345== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40345== Command: ./binary/scalpa tests/16_array_2D.txt tests/16_array_2D.asm
==40345== 
[Yacc] error: syntax error
Reading from tests/16_array_2D.txt.
Output will be saved to tests/16_array_2D.asm.
///////////////////
// Symbol Table
///////////////////
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40345== 
==40345== HEAP SUMMARY:
==40345==     in use at exit: 5 bytes in 1 blocks
==40345==   total heap usage: 9 allocs, 8 frees, 29,695 bytes allocated
==40345== 
==40345== LEAK SUMMARY:
==40345==    definitely lost: 0 bytes in 0 blocks
==40345==    indirectly lost: 0 bytes in 0 blocks
==40345==      possibly lost: 0 bytes in 0 blocks
==40345==    still reachable: 5 bytes in 1 blocks
==40345==         suppressed: 0 bytes in 0 blocks
==40345== Rerun with --leak-check=full to see details of leaked memory
==40345== 
==40345== For lists of detected and suppressed errors, rerun with: -s
==40345== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
.text
main:
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/17_stenc_basic.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 28
// 4

int main() {
  int tab[7], i, somme, moyenne;
  stencil s{3,1} = { 1, 1, 1, 1, 1, 1, 1 };

  for (i = 0; i < 7; i++)
    tab[i] = i;

  somme = tab[3] $ s;
  printi(somme);
  printf("\n");

  moyenne = (tab[3] $ s) / 7;
  printi(moyenne);
  printf("\n");
}

==40351== Memcheck, a memory error detector
==40351== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40351== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40351== Command: ./binary/scalpa tests/17_stenc_basic.txt tests/17_stenc_basic.asm
==40351== 
[Yacc] error: syntax error
Reading from tests/17_stenc_basic.txt.
Output will be saved to tests/17_stenc_basic.asm.
///////////////////
// Symbol Table
///////////////////
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40351== 
==40351== HEAP SUMMARY:
==40351==     in use at exit: 5 bytes in 1 blocks
==40351==   total heap usage: 9 allocs, 8 frees, 29,695 bytes allocated
==40351== 
==40351== LEAK SUMMARY:
==40351==    definitely lost: 0 bytes in 0 blocks
==40351==    indirectly lost: 0 bytes in 0 blocks
==40351==      possibly lost: 0 bytes in 0 blocks
==40351==    still reachable: 5 bytes in 1 blocks
==40351==         suppressed: 0 bytes in 0 blocks
==40351== Rerun with --leak-check=full to see details of leaked memory
==40351== 
==40351== For lists of detected and suppressed errors, rerun with: -s
==40351== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
.text
main:
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/18_stenc_complex.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 30

int main() {
  int tab[5][5], res[5][5], i, j;
  stencil s{1,2} = {{1, 2, 1}, {2, 3, 2}, {1, 2, 1}};

  for (i = 0; i < 5; i++)
    for (j = 0; j < 5; j++)
      tab[i][j] = i + 1;

  for (i = 1; i < 4; i++)
    for (j = 1; j < 4; j++)
      res[i][j] = tab[i][j] $ s;
  
  printi(res[2][2]);
  printf("\n");
}

==40356== Memcheck, a memory error detector
==40356== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40356== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40356== Command: ./binary/scalpa tests/18_stenc_complex.txt tests/18_stenc_complex.asm
==40356== 
[Yacc] error: syntax error
Reading from tests/18_stenc_complex.txt.
Output will be saved to tests/18_stenc_complex.asm.
///////////////////
// Symbol Table
///////////////////
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40356== 
==40356== HEAP SUMMARY:
==40356==     in use at exit: 5 bytes in 1 blocks
==40356==   total heap usage: 9 allocs, 8 frees, 29,695 bytes allocated
==40356== 
==40356== LEAK SUMMARY:
==40356==    definitely lost: 0 bytes in 0 blocks
==40356==    indirectly lost: 0 bytes in 0 blocks
==40356==      possibly lost: 0 bytes in 0 blocks
==40356==    still reachable: 5 bytes in 1 blocks
==40356==         suppressed: 0 bytes in 0 blocks
==40356== Rerun with --leak-check=full to see details of leaked memory
==40356== 
==40356== For lists of detected and suppressed errors, rerun with: -s
==40356== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
.text
main:
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/19_function_call.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 120

int factorial(int n) {
  int accu = 1;

  while (n != 0) {
    accu = accu * n;
    n = n - 1;
  }

  return accu;
}

int main() {
  int fac;
  fac = factorial(5);
  printi(fac);
  printf("\n");
}

==40363== Memcheck, a memory error detector
==40363== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40363== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40363== Command: ./binary/scalpa tests/19_function_call.txt tests/19_function_call.asm
==40363== 
[Yacc] error: syntax error
Reading from tests/19_function_call.txt.
Output will be saved to tests/19_function_call.asm.
///////////////////
// Symbol Table
///////////////////
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40363== 
==40363== HEAP SUMMARY:
==40363==     in use at exit: 10 bytes in 1 blocks
==40363==   total heap usage: 9 allocs, 8 frees, 29,700 bytes allocated
==40363== 
==40363== LEAK SUMMARY:
==40363==    definitely lost: 0 bytes in 0 blocks
==40363==    indirectly lost: 0 bytes in 0 blocks
==40363==      possibly lost: 0 bytes in 0 blocks
==40363==    still reachable: 10 bytes in 1 blocks
==40363==         suppressed: 0 bytes in 0 blocks
==40363== Rerun with --leak-check=full to see details of leaked memory
==40363== 
==40363== For lists of detected and suppressed errors, rerun with: -s
==40363== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
.text
main:
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/20_function_recursive.txt

//#include <stdio.h>
//#define printf(X) fprintf(stdout, "%s", (X))
//#define printi(X) fprintf(stdout, "%d", (X))

// Output:
// 120

int factorial(int n) {
  int accu = 1;

  if (n != 0) {
    accu = factorial(n - 1) * n;
  } else {
    accu = 1;
  }

  return accu;
}

int main() {
  int fac;
  fac = factorial(5);
  printi(fac);
  printf("\n");
}

==40368== Memcheck, a memory error detector
==40368== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40368== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40368== Command: ./binary/scalpa tests/20_function_recursive.txt tests/20_function_recursive.asm
==40368== 
[Yacc] error: syntax error
Reading from tests/20_function_recursive.txt.
Output will be saved to tests/20_function_recursive.asm.
///////////////////
// Symbol Table
///////////////////
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40368== 
==40368== HEAP SUMMARY:
==40368==     in use at exit: 10 bytes in 1 blocks
==40368==   total heap usage: 9 allocs, 8 frees, 29,700 bytes allocated
==40368== 
==40368== LEAK SUMMARY:
==40368==    definitely lost: 0 bytes in 0 blocks
==40368==    indirectly lost: 0 bytes in 0 blocks
==40368==      possibly lost: 0 bytes in 0 blocks
==40368==    still reachable: 10 bytes in 1 blocks
==40368==         suppressed: 0 bytes in 0 blocks
==40368== Rerun with --leak-check=full to see details of leaked memory
==40368== 
==40368== For lists of detected and suppressed errors, rerun with: -s
==40368== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
.text
main:
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.bool.and.txt

if(3<4 && 6>2) int a = 1;
int b=1; // Fin
if(3<4 && !6>2) a = 1;
b=1; // Fin

==40374== Memcheck, a memory error detector
==40374== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40374== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40374== Command: ./binary/scalpa tests/test.bool.and.txt tests/test.bool.and.asm
==40374== 
Reading from tests/test.bool.and.txt.
Output will be saved to tests/test.bool.and.asm.
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 3
 CONST_3   |   SYMBOL_CST = 4
 CONST_5   |   SYMBOL_CST = 6
 CONST_7   |   SYMBOL_CST = 2
 CONST_9   |   SYMBOL_CST = 1
       a   |   SYMBOL_INT
CONST_11   |   SYMBOL_CST = 1
       b   |   SYMBOL_INT
CONST_13   |   SYMBOL_CST = 3
CONST_15   |   SYMBOL_CST = 4
CONST_17   |   SYMBOL_CST = 6
CONST_19   |   SYMBOL_CST = 2
CONST_21   |   SYMBOL_CST = 1
CONST_23   |   SYMBOL_CST = 1
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, IF CONST_1 < CONST_3 -> Goto -> QUAD     2
id:    1, Goto -> QUAD     5
id:    2, IF CONST_5 > CONST_7 -> Goto -> QUAD     4
id:    3, Goto -> QUAD     5
id:    4, operator: =, res:     a, right: CONST_9
id:    5, operator: =, res:     b, right: CONST_11
id:    6, IF CONST_13 < CONST_15 -> Goto -> QUAD     8
id:    7, Goto -> QUAD    11
id:    8, IF CONST_17 > CONST_19 -> Goto -> QUAD    11
id:    9, Goto -> QUAD    10
id:   10, operator: =, res:     a, right: CONST_21
id:   11, operator: =, res:     b, right: CONST_23
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40374== 
==40374== HEAP SUMMARY:
==40374==     in use at exit: 0 bytes in 0 blocks
==40374==   total heap usage: 80 allocs, 80 frees, 31,389 bytes allocated
==40374== 
==40374== All heap blocks were freed -- no leaks are possible
==40374== 
==40374== For lists of detected and suppressed errors, rerun with: -s
==40374== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 3
PTC_CONST_3_:	.word 4
PTC_CONST_5_:	.word 6
PTC_CONST_7_:	.word 2
PTC_CONST_9_:	.word 1
PTC_a_:	.word 0
PTC_CONST_11_:	.word 1
PTC_b_:	.word 0
PTC_CONST_13_:	.word 3
PTC_CONST_15_:	.word 4
PTC_CONST_17_:	.word 6
PTC_CONST_19_:	.word 2
PTC_CONST_21_:	.word 1
PTC_CONST_23_:	.word 1
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    lw $t1, PTC_CONST_3_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_2
LABEL_Q_1:
    j LABEL_Q_5
LABEL_Q_2:
    lw $t0, PTC_CONST_5_
    lw $t1, PTC_CONST_7_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_4
LABEL_Q_3:
    j LABEL_Q_5
LABEL_Q_4:
    lw $t0, PTC_CONST_9_
    sw $t0, PTC_a_
LABEL_Q_5:
    lw $t0, PTC_CONST_11_
    sw $t0, PTC_b_
LABEL_Q_6:
    lw $t0, PTC_CONST_13_
    lw $t1, PTC_CONST_15_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_8
LABEL_Q_7:
    j LABEL_Q_11
LABEL_Q_8:
    lw $t0, PTC_CONST_17_
    lw $t1, PTC_CONST_19_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_11
LABEL_Q_9:
    j LABEL_Q_10
LABEL_Q_10:
    lw $t0, PTC_CONST_21_
    sw $t0, PTC_a_
LABEL_Q_11:
    lw $t0, PTC_CONST_23_
    sw $t0, PTC_b_
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.bool.not.txt

if(!4<3) int a = 1;
int b=1; 
if(!true) int c = 3;

if(3==3 && !6==6) int e=8;
int p=5;

==40379== Memcheck, a memory error detector
==40379== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40379== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40379== Command: ./binary/scalpa tests/test.bool.not.txt tests/test.bool.not.asm
==40379== 
Reading from tests/test.bool.not.txt.
Output will be saved to tests/test.bool.not.asm.
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 4
 CONST_3   |   SYMBOL_CST = 3
 CONST_5   |   SYMBOL_CST = 1
       a   |   SYMBOL_INT
 CONST_7   |   SYMBOL_CST = 1
       b   |   SYMBOL_INT
 CONST_9   |   SYMBOL_CST = 3
       c   |   SYMBOL_INT
CONST_11   |   SYMBOL_CST = 3
CONST_13   |   SYMBOL_CST = 3
CONST_15   |   SYMBOL_CST = 6
CONST_17   |   SYMBOL_CST = 6
CONST_19   |   SYMBOL_CST = 8
       e   |   SYMBOL_INT
CONST_21   |   SYMBOL_CST = 5
       p   |   SYMBOL_INT
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, IF CONST_1 < CONST_3 -> Goto -> QUAD     3
id:    1, Goto -> QUAD     2
id:    2, operator: =, res:     a, right: CONST_5
id:    3, operator: =, res:     b, right: CONST_7
id:    4, Goto -> QUAD     6
id:    5, operator: =, res:     c, right: CONST_9
id:    6, IF CONST_11 == CONST_13 -> Goto -> QUAD     8
id:    7, Goto -> QUAD    11
id:    8, IF CONST_15 == CONST_17 -> Goto -> QUAD    11
id:    9, Goto -> QUAD    10
id:   10, operator: =, res:     e, right: CONST_19
id:   11, operator: =, res:     p, right: CONST_21
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40379== 
==40379== HEAP SUMMARY:
==40379==     in use at exit: 0 bytes in 0 blocks
==40379==   total heap usage: 82 allocs, 82 frees, 31,364 bytes allocated
==40379== 
==40379== All heap blocks were freed -- no leaks are possible
==40379== 
==40379== For lists of detected and suppressed errors, rerun with: -s
==40379== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 4
PTC_CONST_3_:	.word 3
PTC_CONST_5_:	.word 1
PTC_a_:	.word 0
PTC_CONST_7_:	.word 1
PTC_b_:	.word 0
PTC_CONST_9_:	.word 3
PTC_c_:	.word 0
PTC_CONST_11_:	.word 3
PTC_CONST_13_:	.word 3
PTC_CONST_15_:	.word 6
PTC_CONST_17_:	.word 6
PTC_CONST_19_:	.word 8
PTC_e_:	.word 0
PTC_CONST_21_:	.word 5
PTC_p_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    lw $t1, PTC_CONST_3_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_3
LABEL_Q_1:
    j LABEL_Q_2
LABEL_Q_2:
    lw $t0, PTC_CONST_5_
    sw $t0, PTC_a_
LABEL_Q_3:
    lw $t0, PTC_CONST_7_
    sw $t0, PTC_b_
LABEL_Q_4:
    j LABEL_Q_6
LABEL_Q_5:
    lw $t0, PTC_CONST_9_
    sw $t0, PTC_c_
LABEL_Q_6:
    lw $t0, PTC_CONST_11_
    lw $t1, PTC_CONST_13_
    beq $t0, $t1, LABEL_Q_8
LABEL_Q_7:
    j LABEL_Q_11
LABEL_Q_8:
    lw $t0, PTC_CONST_15_
    lw $t1, PTC_CONST_17_
    beq $t0, $t1, LABEL_Q_11
LABEL_Q_9:
    j LABEL_Q_10
LABEL_Q_10:
    lw $t0, PTC_CONST_19_
    sw $t0, PTC_e_
LABEL_Q_11:
    lw $t0, PTC_CONST_21_
    sw $t0, PTC_p_
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.bool.or.txt

int a;
int c;
int b;
int e;

if(3<4 || 6>2) a = 1;
c=3;
if(3<4 || !6>2) e=1;
b=1; // Fin


==40387== Memcheck, a memory error detector
==40387== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40387== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40387== Command: ./binary/scalpa tests/test.bool.or.txt tests/test.bool.or.asm
==40387== 
Reading from tests/test.bool.or.txt.
Output will be saved to tests/test.bool.or.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       c   |   SYMBOL_INT
       b   |   SYMBOL_INT
       e   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 3
 CONST_3   |   SYMBOL_CST = 4
 CONST_5   |   SYMBOL_CST = 6
 CONST_7   |   SYMBOL_CST = 2
 CONST_9   |   SYMBOL_CST = 1
CONST_11   |   SYMBOL_CST = 3
CONST_13   |   SYMBOL_CST = 3
CONST_15   |   SYMBOL_CST = 4
CONST_17   |   SYMBOL_CST = 6
CONST_19   |   SYMBOL_CST = 2
CONST_21   |   SYMBOL_CST = 1
CONST_23   |   SYMBOL_CST = 1
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, IF CONST_1 < CONST_3 -> Goto -> QUAD     4
id:    1, Goto -> QUAD     2
id:    2, IF CONST_5 > CONST_7 -> Goto -> QUAD     4
id:    3, Goto -> QUAD     5
id:    4, operator: =, res:     a, right: CONST_9
id:    5, operator: =, res:     c, right: CONST_11
id:    6, IF CONST_13 < CONST_15 -> Goto -> QUAD    10
id:    7, Goto -> QUAD     8
id:    8, IF CONST_17 > CONST_19 -> Goto -> QUAD    11
id:    9, Goto -> QUAD    10
id:   10, operator: =, res:     e, right: CONST_21
id:   11, operator: =, res:     b, right: CONST_23
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40387== 
==40387== HEAP SUMMARY:
==40387==     in use at exit: 0 bytes in 0 blocks
==40387==   total heap usage: 86 allocs, 86 frees, 31,401 bytes allocated
==40387== 
==40387== All heap blocks were freed -- no leaks are possible
==40387== 
==40387== For lists of detected and suppressed errors, rerun with: -s
==40387== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_c_:	.word 0
PTC_b_:	.word 0
PTC_e_:	.word 0
PTC_CONST_1_:	.word 3
PTC_CONST_3_:	.word 4
PTC_CONST_5_:	.word 6
PTC_CONST_7_:	.word 2
PTC_CONST_9_:	.word 1
PTC_CONST_11_:	.word 3
PTC_CONST_13_:	.word 3
PTC_CONST_15_:	.word 4
PTC_CONST_17_:	.word 6
PTC_CONST_19_:	.word 2
PTC_CONST_21_:	.word 1
PTC_CONST_23_:	.word 1
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    lw $t1, PTC_CONST_3_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_4
LABEL_Q_1:
    j LABEL_Q_2
LABEL_Q_2:
    lw $t0, PTC_CONST_5_
    lw $t1, PTC_CONST_7_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_4
LABEL_Q_3:
    j LABEL_Q_5
LABEL_Q_4:
    lw $t0, PTC_CONST_9_
    sw $t0, PTC_a_
LABEL_Q_5:
    lw $t0, PTC_CONST_11_
    sw $t0, PTC_c_
LABEL_Q_6:
    lw $t0, PTC_CONST_13_
    lw $t1, PTC_CONST_15_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_10
LABEL_Q_7:
    j LABEL_Q_8
LABEL_Q_8:
    lw $t0, PTC_CONST_17_
    lw $t1, PTC_CONST_19_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_11
LABEL_Q_9:
    j LABEL_Q_10
LABEL_Q_10:
    lw $t0, PTC_CONST_21_
    sw $t0, PTC_e_
LABEL_Q_11:
    lw $t0, PTC_CONST_23_
    sw $t0, PTC_b_
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.bool.txt

int a;
int b;
a=5;
if(a==5)
    a = 5 + 1;
b=6;
if(b==4) b=4;

==40392== Memcheck, a memory error detector
==40392== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40392== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40392== Command: ./binary/scalpa tests/test.bool.txt tests/test.bool.asm
==40392== 
Reading from tests/test.bool.txt.
Output will be saved to tests/test.bool.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 5
 CONST_3   |   SYMBOL_CST = 5
 CONST_5   |   SYMBOL_CST = 5
 CONST_7   |   SYMBOL_CST = 1
  TEMP_1   |   SYMBOL_INT
 CONST_9   |   SYMBOL_CST = 6
CONST_11   |   SYMBOL_CST = 4
CONST_13   |   SYMBOL_CST = 4
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, IF     a == CONST_3 -> Goto -> QUAD     3
id:    2, Goto -> QUAD     5
id:    3, operator: +, res: TEMP_1, left: CONST_5, right: CONST_7
id:    4, operator: =, res:     a, right: TEMP_1
id:    5, operator: =, res:     b, right: CONST_9
id:    6, IF     b == CONST_11 -> Goto -> QUAD     8
id:    7, Goto -> END
id:    8, operator: =, res:     b, right: CONST_13
///////////////////
// end quad List
///////////////////
Cleaned 1 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40392== 
==40392== HEAP SUMMARY:
==40392==     in use at exit: 0 bytes in 0 blocks
==40392==   total heap usage: 60 allocs, 60 frees, 30,807 bytes allocated
==40392== 
==40392== All heap blocks were freed -- no leaks are possible
==40392== 
==40392== For lists of detected and suppressed errors, rerun with: -s
==40392== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_CONST_1_:	.word 5
PTC_CONST_3_:	.word 5
PTC_CONST_5_:	.word 5
PTC_CONST_7_:	.word 1
PTC_TEMP_1_:	.word 0
PTC_CONST_9_:	.word 6
PTC_CONST_11_:	.word 4
PTC_CONST_13_:	.word 4
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_3_
    beq $t0, $t1, LABEL_Q_3
LABEL_Q_2:
    j LABEL_Q_5
LABEL_Q_3:
    lw $t0, PTC_CONST_5_
    lw $t1, PTC_CONST_7_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_4:
    lw $t0, PTC_TEMP_1_
    sw $t0, PTC_a_
LABEL_Q_5:
    lw $t0, PTC_CONST_9_
    sw $t0, PTC_b_
LABEL_Q_6:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_11_
    beq $t0, $t1, LABEL_Q_8
LABEL_Q_7:
    j LABEL_END
LABEL_Q_8:
    lw $t0, PTC_CONST_13_
    sw $t0, PTC_b_
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.bools.txt

int a = 1;
int e;
int f;
if(true) a = 2;
if(a == 2) a=3;
if(false) a=100;
if(a>=90) a =0;
6+6; // Separator
if(6==5 && (false || true) && !9>10)e=500;
f=0;

==40398== Memcheck, a memory error detector
==40398== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40398== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40398== Command: ./binary/scalpa tests/test.bools.txt tests/test.bools.asm
==40398== 
Reading from tests/test.bools.txt.
Output will be saved to tests/test.bools.asm.
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 1
       a   |   SYMBOL_INT
       e   |   SYMBOL_INT
       f   |   SYMBOL_INT
 CONST_3   |   SYMBOL_CST = 2
 CONST_5   |   SYMBOL_CST = 2
 CONST_7   |   SYMBOL_CST = 3
 CONST_9   |   SYMBOL_CST = 100
CONST_11   |   SYMBOL_CST = 90
CONST_13   |   SYMBOL_CST = 0
CONST_15   |   SYMBOL_CST = 6
CONST_17   |   SYMBOL_CST = 6
  TEMP_1   |   SYMBOL_INT
CONST_19   |   SYMBOL_CST = 6
CONST_21   |   SYMBOL_CST = 5
CONST_23   |   SYMBOL_CST = 9
CONST_25   |   SYMBOL_CST = 10
CONST_27   |   SYMBOL_CST = 500
CONST_29   |   SYMBOL_CST = 0
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, Goto -> QUAD     2
id:    2, operator: =, res:     a, right: CONST_3
id:    3, IF     a == CONST_5 -> Goto -> QUAD     5
id:    4, Goto -> QUAD     6
id:    5, operator: =, res:     a, right: CONST_7
id:    6, Goto -> QUAD     8
id:    7, operator: =, res:     a, right: CONST_9
id:    8, IF     a >= CONST_11 -> Goto -> QUAD    10
id:    9, Goto -> QUAD    11
id:   10, operator: =, res:     a, right: CONST_13
id:   11, operator: +, res: TEMP_1, left: CONST_15, right: CONST_17
id:   12, IF CONST_19 == CONST_21 -> Goto -> QUAD    14
id:   13, Goto -> QUAD    19
id:   14, Goto -> QUAD    15
id:   15, Goto -> QUAD    16
id:   16, IF CONST_23 > CONST_25 -> Goto -> QUAD    19
id:   17, Goto -> QUAD    18
id:   18, operator: =, res:     e, right: CONST_27
id:   19, operator: =, res:     f, right: CONST_29
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40398== 
==40398== HEAP SUMMARY:
==40398==     in use at exit: 0 bytes in 0 blocks
==40398==   total heap usage: 118 allocs, 118 frees, 32,255 bytes allocated
==40398== 
==40398== All heap blocks were freed -- no leaks are possible
==40398== 
==40398== For lists of detected and suppressed errors, rerun with: -s
==40398== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 1
PTC_a_:	.word 0
PTC_e_:	.word 0
PTC_f_:	.word 0
PTC_CONST_3_:	.word 2
PTC_CONST_5_:	.word 2
PTC_CONST_7_:	.word 3
PTC_CONST_9_:	.word 100
PTC_CONST_11_:	.word 90
PTC_CONST_13_:	.word 0
PTC_CONST_15_:	.word 6
PTC_CONST_17_:	.word 6
PTC_TEMP_1_:	.word 0
PTC_CONST_19_:	.word 6
PTC_CONST_21_:	.word 5
PTC_CONST_23_:	.word 9
PTC_CONST_25_:	.word 10
PTC_CONST_27_:	.word 500
PTC_CONST_29_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    j LABEL_Q_2
LABEL_Q_2:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_a_
LABEL_Q_3:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_5_
    beq $t0, $t1, LABEL_Q_5
LABEL_Q_4:
    j LABEL_Q_6
LABEL_Q_5:
    lw $t0, PTC_CONST_7_
    sw $t0, PTC_a_
LABEL_Q_6:
    j LABEL_Q_8
LABEL_Q_7:
    lw $t0, PTC_CONST_9_
    sw $t0, PTC_a_
LABEL_Q_8:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_11_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_10
    beq $t0, $t1, LABEL_Q_10
LABEL_Q_9:
    j LABEL_Q_11
LABEL_Q_10:
    lw $t0, PTC_CONST_13_
    sw $t0, PTC_a_
LABEL_Q_11:
    lw $t0, PTC_CONST_15_
    lw $t1, PTC_CONST_17_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_12:
    lw $t0, PTC_CONST_19_
    lw $t1, PTC_CONST_21_
    beq $t0, $t1, LABEL_Q_14
LABEL_Q_13:
    j LABEL_Q_19
LABEL_Q_14:
    j LABEL_Q_15
LABEL_Q_15:
    j LABEL_Q_16
LABEL_Q_16:
    lw $t0, PTC_CONST_23_
    lw $t1, PTC_CONST_25_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_19
LABEL_Q_17:
    j LABEL_Q_18
LABEL_Q_18:
    lw $t0, PTC_CONST_27_
    sw $t0, PTC_e_
LABEL_Q_19:
    lw $t0, PTC_CONST_29_
    sw $t0, PTC_f_
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.braced.txt

int a;
{
    int b = 100;
    a = b / 2;
}
{
    int c;
}
if(a==50){  a = 72; b=100; }
// if(62>2) {int d;} not allowed

if(b!=6) { a = 10; } else { a = 129; }

==40403== Memcheck, a memory error detector
==40403== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40403== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40403== Command: ./binary/scalpa tests/test.braced.txt tests/test.braced.asm
==40403== 
Reading from tests/test.braced.txt.
Output will be saved to tests/test.braced.asm.
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 100
       b   |   SYMBOL_INT
 CONST_3   |   SYMBOL_CST = 2
  TEMP_1   |   SYMBOL_INT
       c   |   SYMBOL_INT
 CONST_5   |   SYMBOL_CST = 50
 CONST_7   |   SYMBOL_CST = 72
 CONST_9   |   SYMBOL_CST = 100
CONST_11   |   SYMBOL_CST = 6
CONST_13   |   SYMBOL_CST = 10
CONST_15   |   SYMBOL_CST = 129
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     b, right: CONST_1
id:    1, operator: /, res: TEMP_1, left:     b, right: CONST_3
id:    2, operator: =, res:     a, right: TEMP_1
id:    3, IF     a == CONST_5 -> Goto -> QUAD     5
id:    4, Goto -> QUAD     7
id:    5, operator: =, res:     a, right: CONST_7
id:    6, operator: =, res:     b, right: CONST_9
id:    7, IF     b != CONST_11 -> Goto -> QUAD     9
id:    8, Goto -> QUAD    11
id:    9, operator: =, res:     a, right: CONST_13
id:   10, Goto -> END
id:   11, operator: =, res:     a, right: CONST_15
///////////////////
// end quad List
///////////////////
Cleaned 1 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40403== 
==40403== HEAP SUMMARY:
==40403==     in use at exit: 0 bytes in 0 blocks
==40403==   total heap usage: 73 allocs, 73 frees, 31,088 bytes allocated
==40403== 
==40403== All heap blocks were freed -- no leaks are possible
==40403== 
==40403== For lists of detected and suppressed errors, rerun with: -s
==40403== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_CONST_1_:	.word 100
PTC_b_:	.word 0
PTC_CONST_3_:	.word 2
PTC_TEMP_1_:	.word 0
PTC_c_:	.word 0
PTC_CONST_5_:	.word 50
PTC_CONST_7_:	.word 72
PTC_CONST_9_:	.word 100
PTC_CONST_11_:	.word 6
PTC_CONST_13_:	.word 10
PTC_CONST_15_:	.word 129
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_b_
LABEL_Q_1:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_3_
    div $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_1_
LABEL_Q_2:
    lw $t0, PTC_TEMP_1_
    sw $t0, PTC_a_
LABEL_Q_3:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_5_
    beq $t0, $t1, LABEL_Q_5
LABEL_Q_4:
    j LABEL_Q_7
LABEL_Q_5:
    lw $t0, PTC_CONST_7_
    sw $t0, PTC_a_
LABEL_Q_6:
    lw $t0, PTC_CONST_9_
    sw $t0, PTC_b_
LABEL_Q_7:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_11_
    bne $t0, $t1, LABEL_Q_9
LABEL_Q_8:
    j LABEL_Q_11
LABEL_Q_9:
    lw $t0, PTC_CONST_13_
    sw $t0, PTC_a_
LABEL_Q_10:
    j LABEL_END
LABEL_Q_11:
    lw $t0, PTC_CONST_15_
    sw $t0, PTC_a_
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.cyril.txt

int a;
int b;

a=5;

printi(5);
printi(a);

if(a==5)
    a = 5 + 1;

b=0;

while(b <= a)
{
    ++b;
    printi(b);
}

if(b==7)
    printi(111);

if(b>=7)
    printi(222);

if(b>7)
    printi(333);

if(b<7)
    printi(444);

if(b<=7)
    printi(555);

if(b!=7)
    printi(666);

int tmp;

tmp = 2/4;
printi(tmp);
tmp = 2*4;
printi(tmp);
tmp = 2+4;
printi(tmp);
tmp = 4-2;
printi(tmp);
tmp = 5%2;
printi(tmp);

b=1;

printi(12345678);

while(b<10)
{
    tmp = b%5;
    printi(tmp);
    ++b;
}

==40409== Memcheck, a memory error detector
==40409== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40409== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40409== Command: ./binary/scalpa tests/test.cyril.txt tests/test.cyril.asm
==40409== 
[Yacc] error: syntax error
Reading from tests/test.cyril.txt.
Output will be saved to tests/test.cyril.asm.
Caractere inconnu: %
///////////////////
// Symbol Table
///////////////////
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
 CONST_1   |   SYMBOL_CST = 5
 CONST_3   |   SYMBOL_CST = 5
 CONST_5   |   SYMBOL_CST = 5
 CONST_7   |   SYMBOL_CST = 5
 CONST_9   |   SYMBOL_CST = 1
  TEMP_1   |   SYMBOL_INT
CONST_11   |   SYMBOL_CST = 0
CONST_13   |   SYMBOL_CST = 1
  TEMP_3   |   SYMBOL_INT
CONST_15   |   SYMBOL_CST = 7
CONST_17   |   SYMBOL_CST = 111
CONST_19   |   SYMBOL_CST = 7
CONST_21   |   SYMBOL_CST = 222
CONST_23   |   SYMBOL_CST = 7
CONST_25   |   SYMBOL_CST = 333
CONST_27   |   SYMBOL_CST = 7
CONST_29   |   SYMBOL_CST = 444
CONST_31   |   SYMBOL_CST = 7
CONST_33   |   SYMBOL_CST = 555
CONST_35   |   SYMBOL_CST = 7
CONST_37   |   SYMBOL_CST = 666
     tmp   |   SYMBOL_INT
CONST_39   |   SYMBOL_CST = 2
CONST_41   |   SYMBOL_CST = 4
  TEMP_5   |   SYMBOL_INT
CONST_43   |   SYMBOL_CST = 2
CONST_45   |   SYMBOL_CST = 4
  TEMP_7   |   SYMBOL_INT
CONST_47   |   SYMBOL_CST = 2
CONST_49   |   SYMBOL_CST = 4
  TEMP_9   |   SYMBOL_INT
CONST_51   |   SYMBOL_CST = 4
CONST_53   |   SYMBOL_CST = 2
 TEMP_11   |   SYMBOL_INT
CONST_55   |   SYMBOL_CST = 5
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, PRINTI CONST_3
id:    2, PRINTI     a
id:    3, IF     a == CONST_5 -> Goto -> QUAD     5
id:    4, Goto -> QUAD     7
id:    5, operator: +, res: TEMP_1, left: CONST_7, right: CONST_9
id:    6, operator: =, res:     a, right: TEMP_1
id:    7, operator: =, res:     b, right: CONST_11
id:    8, IF     b <=     a -> Goto -> QUAD    10
id:    9, Goto -> QUAD    14
id:   10, operator: +, res: TEMP_3, left:     b, right: CONST_13
id:   11, operator: =, res:     b, right: TEMP_3
id:   12, PRINTI     b
id:   13, Goto -> QUAD     8
id:   14, IF     b == CONST_15 -> Goto -> QUAD    16
id:   15, Goto -> QUAD    17
id:   16, PRINTI CONST_17
id:   17, IF     b >= CONST_19 -> Goto -> QUAD    19
id:   18, Goto -> QUAD    20
id:   19, PRINTI CONST_21
id:   20, IF     b > CONST_23 -> Goto -> QUAD    22
id:   21, Goto -> QUAD    23
id:   22, PRINTI CONST_25
id:   23, IF     b < CONST_27 -> Goto -> QUAD    25
id:   24, Goto -> QUAD    26
id:   25, PRINTI CONST_29
id:   26, IF     b <= CONST_31 -> Goto -> QUAD    28
id:   27, Goto -> QUAD    29
id:   28, PRINTI CONST_33
id:   29, IF     b != CONST_35 -> Goto -> QUAD    31
id:   30, Goto -> QUAD    32
id:   31, PRINTI CONST_37
id:   32, operator: /, res: TEMP_5, left: CONST_39, right: CONST_41
id:   33, operator: =, res:   tmp, right: TEMP_5
id:   34, PRINTI   tmp
id:   35, operator: *, res: TEMP_7, left: CONST_43, right: CONST_45
id:   36, operator: =, res:   tmp, right: TEMP_7
id:   37, PRINTI   tmp
id:   38, operator: +, res: TEMP_9, left: CONST_47, right: CONST_49
id:   39, operator: =, res:   tmp, right: TEMP_9
id:   40, PRINTI   tmp
id:   41, operator: -, res: TEMP_11, left: CONST_51, right: CONST_53
id:   42, operator: =, res:   tmp, right: TEMP_11
id:   43, PRINTI   tmp
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40409== 
==40409== HEAP SUMMARY:
==40409==     in use at exit: 4 bytes in 1 blocks
==40409==   total heap usage: 221 allocs, 220 frees, 34,694 bytes allocated
==40409== 
==40409== LEAK SUMMARY:
==40409==    definitely lost: 4 bytes in 1 blocks
==40409==    indirectly lost: 0 bytes in 0 blocks
==40409==      possibly lost: 0 bytes in 0 blocks
==40409==    still reachable: 0 bytes in 0 blocks
==40409==         suppressed: 0 bytes in 0 blocks
==40409== Rerun with --leak-check=full to see details of leaked memory
==40409== 
==40409== For lists of detected and suppressed errors, rerun with: -s
==40409== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_CONST_1_:	.word 5
PTC_CONST_3_:	.word 5
PTC_CONST_5_:	.word 5
PTC_CONST_7_:	.word 5
PTC_CONST_9_:	.word 1
PTC_TEMP_1_:	.word 0
PTC_CONST_11_:	.word 0
PTC_CONST_13_:	.word 1
PTC_TEMP_3_:	.word 0
PTC_CONST_15_:	.word 7
PTC_CONST_17_:	.word 111
PTC_CONST_19_:	.word 7
PTC_CONST_21_:	.word 222
PTC_CONST_23_:	.word 7
PTC_CONST_25_:	.word 333
PTC_CONST_27_:	.word 7
PTC_CONST_29_:	.word 444
PTC_CONST_31_:	.word 7
PTC_CONST_33_:	.word 555
PTC_CONST_35_:	.word 7
PTC_CONST_37_:	.word 666
PTC_tmp_:	.word 0
PTC_CONST_39_:	.word 2
PTC_CONST_41_:	.word 4
PTC_TEMP_5_:	.word 0
PTC_CONST_43_:	.word 2
PTC_CONST_45_:	.word 4
PTC_TEMP_7_:	.word 0
PTC_CONST_47_:	.word 2
PTC_CONST_49_:	.word 4
PTC_TEMP_9_:	.word 0
PTC_CONST_51_:	.word 4
PTC_CONST_53_:	.word 2
PTC_TEMP_11_:	.word 0
PTC_CONST_55_:	.word 5
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    li $v0, 1
    lw $a0, PTC_CONST_3_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_2:
    li $v0, 1
    lw $a0, PTC_a_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_3:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_5_
    beq $t0, $t1, LABEL_Q_5
LABEL_Q_4:
    j LABEL_Q_7
LABEL_Q_5:
    lw $t0, PTC_CONST_7_
    lw $t1, PTC_CONST_9_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_6:
    lw $t0, PTC_TEMP_1_
    sw $t0, PTC_a_
LABEL_Q_7:
    lw $t0, PTC_CONST_11_
    sw $t0, PTC_b_
LABEL_Q_8:
    lw $t0, PTC_b_
    lw $t1, PTC_a_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_10
    beq $t0, $t1, LABEL_Q_10
LABEL_Q_9:
    j LABEL_Q_14
LABEL_Q_10:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_13_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_3_
LABEL_Q_11:
    lw $t0, PTC_TEMP_3_
    sw $t0, PTC_b_
LABEL_Q_12:
    li $v0, 1
    lw $a0, PTC_b_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_13:
    j LABEL_Q_8
LABEL_Q_14:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_15_
    beq $t0, $t1, LABEL_Q_16
LABEL_Q_15:
    j LABEL_Q_17
LABEL_Q_16:
    li $v0, 1
    lw $a0, PTC_CONST_17_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_17:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_19_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_19
    beq $t0, $t1, LABEL_Q_19
LABEL_Q_18:
    j LABEL_Q_20
LABEL_Q_19:
    li $v0, 1
    lw $a0, PTC_CONST_21_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_20:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_23_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_22
LABEL_Q_21:
    j LABEL_Q_23
LABEL_Q_22:
    li $v0, 1
    lw $a0, PTC_CONST_25_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_23:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_27_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_25
LABEL_Q_24:
    j LABEL_Q_26
LABEL_Q_25:
    li $v0, 1
    lw $a0, PTC_CONST_29_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_26:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_31_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_28
    beq $t0, $t1, LABEL_Q_28
LABEL_Q_27:
    j LABEL_Q_29
LABEL_Q_28:
    li $v0, 1
    lw $a0, PTC_CONST_33_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_29:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_35_
    bne $t0, $t1, LABEL_Q_31
LABEL_Q_30:
    j LABEL_Q_32
LABEL_Q_31:
    li $v0, 1
    lw $a0, PTC_CONST_37_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_32:
    lw $t0, PTC_CONST_39_
    lw $t1, PTC_CONST_41_
    div $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_5_
LABEL_Q_33:
    lw $t0, PTC_TEMP_5_
    sw $t0, PTC_tmp_
LABEL_Q_34:
    li $v0, 1
    lw $a0, PTC_tmp_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_35:
    lw $t0, PTC_CONST_43_
    lw $t1, PTC_CONST_45_
    mult $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_7_
LABEL_Q_36:
    lw $t0, PTC_TEMP_7_
    sw $t0, PTC_tmp_
LABEL_Q_37:
    li $v0, 1
    lw $a0, PTC_tmp_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_38:
    lw $t0, PTC_CONST_47_
    lw $t1, PTC_CONST_49_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_9_
LABEL_Q_39:
    lw $t0, PTC_TEMP_9_
    sw $t0, PTC_tmp_
LABEL_Q_40:
    li $v0, 1
    lw $a0, PTC_tmp_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_41:
    lw $t0, PTC_CONST_51_
    lw $t1, PTC_CONST_53_
    sub $t2, $t0, $t1
    sw $t2, PTC_TEMP_11_
LABEL_Q_42:
    lw $t0, PTC_TEMP_11_
    sw $t0, PTC_tmp_
LABEL_Q_43:
    li $v0, 1
    lw $a0, PTC_tmp_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.else.txt

int a = 1;
int e;
int f;

if(a==1) e = 120; else f = 128;


if(a>1 && !e==120 || e!=120) f = 0; else a =12;

==40413== Memcheck, a memory error detector
==40413== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40413== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40413== Command: ./binary/scalpa tests/test.else.txt tests/test.else.asm
==40413== 
Reading from tests/test.else.txt.
Output will be saved to tests/test.else.asm.
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 1
       a   |   SYMBOL_INT
       e   |   SYMBOL_INT
       f   |   SYMBOL_INT
 CONST_3   |   SYMBOL_CST = 1
 CONST_5   |   SYMBOL_CST = 120
 CONST_7   |   SYMBOL_CST = 128
 CONST_9   |   SYMBOL_CST = 1
CONST_11   |   SYMBOL_CST = 120
CONST_13   |   SYMBOL_CST = 120
CONST_15   |   SYMBOL_CST = 0
CONST_17   |   SYMBOL_CST = 12
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, IF     a == CONST_3 -> Goto -> QUAD     3
id:    2, Goto -> QUAD     5
id:    3, operator: =, res:     e, right: CONST_5
id:    4, Goto -> QUAD     6
id:    5, operator: =, res:     f, right: CONST_7
id:    6, IF     a > CONST_9 -> Goto -> QUAD     8
id:    7, Goto -> QUAD    10
id:    8, IF     e == CONST_11 -> Goto -> QUAD    10
id:    9, Goto -> QUAD    12
id:   10, IF     e != CONST_13 -> Goto -> QUAD    12
id:   11, Goto -> QUAD    14
id:   12, operator: =, res:     f, right: CONST_15
id:   13, Goto -> END
id:   14, operator: =, res:     a, right: CONST_17
///////////////////
// end quad List
///////////////////
Cleaned 1 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40413== 
==40413== HEAP SUMMARY:
==40413==     in use at exit: 0 bytes in 0 blocks
==40413==   total heap usage: 87 allocs, 87 frees, 31,498 bytes allocated
==40413== 
==40413== All heap blocks were freed -- no leaks are possible
==40413== 
==40413== For lists of detected and suppressed errors, rerun with: -s
==40413== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 1
PTC_a_:	.word 0
PTC_e_:	.word 0
PTC_f_:	.word 0
PTC_CONST_3_:	.word 1
PTC_CONST_5_:	.word 120
PTC_CONST_7_:	.word 128
PTC_CONST_9_:	.word 1
PTC_CONST_11_:	.word 120
PTC_CONST_13_:	.word 120
PTC_CONST_15_:	.word 0
PTC_CONST_17_:	.word 12
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_3_
    beq $t0, $t1, LABEL_Q_3
LABEL_Q_2:
    j LABEL_Q_5
LABEL_Q_3:
    lw $t0, PTC_CONST_5_
    sw $t0, PTC_e_
LABEL_Q_4:
    j LABEL_Q_6
LABEL_Q_5:
    lw $t0, PTC_CONST_7_
    sw $t0, PTC_f_
LABEL_Q_6:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_9_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_8
LABEL_Q_7:
    j LABEL_Q_10
LABEL_Q_8:
    lw $t0, PTC_e_
    lw $t1, PTC_CONST_11_
    beq $t0, $t1, LABEL_Q_10
LABEL_Q_9:
    j LABEL_Q_12
LABEL_Q_10:
    lw $t0, PTC_e_
    lw $t1, PTC_CONST_13_
    bne $t0, $t1, LABEL_Q_12
LABEL_Q_11:
    j LABEL_Q_14
LABEL_Q_12:
    lw $t0, PTC_CONST_15_
    sw $t0, PTC_f_
LABEL_Q_13:
    j LABEL_END
LABEL_Q_14:
    lw $t0, PTC_CONST_17_
    sw $t0, PTC_a_
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.expr.txt

6+2;
int a;
int b;
a=4*(6+2);
b=a;


==40420== Memcheck, a memory error detector
==40420== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40420== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40420== Command: ./binary/scalpa tests/test.expr.txt tests/test.expr.asm
==40420== 
Reading from tests/test.expr.txt.
Output will be saved to tests/test.expr.asm.
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 6
 CONST_3   |   SYMBOL_CST = 2
  TEMP_1   |   SYMBOL_INT
       a   |   SYMBOL_INT
       b   |   SYMBOL_INT
 CONST_5   |   SYMBOL_CST = 4
 CONST_7   |   SYMBOL_CST = 6
 CONST_9   |   SYMBOL_CST = 2
  TEMP_3   |   SYMBOL_INT
  TEMP_5   |   SYMBOL_INT
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: +, res: TEMP_1, left: CONST_1, right: CONST_3
id:    1, operator: +, res: TEMP_3, left: CONST_7, right: CONST_9
id:    2, operator: *, res: TEMP_5, left: CONST_5, right: TEMP_3
id:    3, operator: =, res:     a, right: TEMP_5
id:    4, operator: =, res:     b, right:     a
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40420== 
==40420== HEAP SUMMARY:
==40420==     in use at exit: 0 bytes in 0 blocks
==40420==   total heap usage: 43 allocs, 43 frees, 30,365 bytes allocated
==40420== 
==40420== All heap blocks were freed -- no leaks are possible
==40420== 
==40420== For lists of detected and suppressed errors, rerun with: -s
==40420== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 6
PTC_CONST_3_:	.word 2
PTC_TEMP_1_:	.word 0
PTC_a_:	.word 0
PTC_b_:	.word 0
PTC_CONST_5_:	.word 4
PTC_CONST_7_:	.word 6
PTC_CONST_9_:	.word 2
PTC_TEMP_3_:	.word 0
PTC_TEMP_5_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    lw $t1, PTC_CONST_3_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_1:
    lw $t0, PTC_CONST_7_
    lw $t1, PTC_CONST_9_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_3_
LABEL_Q_2:
    lw $t0, PTC_CONST_5_
    lw $t1, PTC_TEMP_3_
    mult $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_5_
LABEL_Q_3:
    lw $t0, PTC_TEMP_5_
    sw $t0, PTC_a_
LABEL_Q_4:
    lw $t0, PTC_a_
    sw $t0, PTC_b_
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.inc.txt

int a = 5;
a++;

==40425== Memcheck, a memory error detector
==40425== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40425== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40425== Command: ./binary/scalpa tests/test.inc.txt tests/test.inc.asm
==40425== 
Reading from tests/test.inc.txt.
Output will be saved to tests/test.inc.asm.
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 5
       a   |   SYMBOL_INT
 CONST_3   |   SYMBOL_CST = 1
  TEMP_1   |   SYMBOL_INT
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: +, res: TEMP_1, left:     a, right: CONST_3
id:    2, operator: =, res:     a, right: TEMP_1
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40425== 
==40425== HEAP SUMMARY:
==40425==     in use at exit: 0 bytes in 0 blocks
==40425==   total heap usage: 24 allocs, 24 frees, 30,031 bytes allocated
==40425== 
==40425== All heap blocks were freed -- no leaks are possible
==40425== 
==40425== For lists of detected and suppressed errors, rerun with: -s
==40425== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 5
PTC_a_:	.word 0
PTC_CONST_3_:	.word 1
PTC_TEMP_1_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_3_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_2:
    lw $t0, PTC_TEMP_1_
    sw $t0, PTC_a_
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.pgdc.txt

int a = 600;
int b = 888;
int i;
int gdc;
i = 1;
while(i < a && i < b)
{
    if(a%i == 0 && b%i == 0)
        gdc = i;
    i++;
}

printi(gdc);


==40431== Memcheck, a memory error detector
==40431== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40431== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40431== Command: ./binary/scalpa tests/test.pgdc.txt tests/test.pgdc.asm
==40431== 
[Yacc] error: syntax error
Reading from tests/test.pgdc.txt.
Output will be saved to tests/test.pgdc.asm.
Caractere inconnu: %
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 600
       a   |   SYMBOL_INT
 CONST_3   |   SYMBOL_CST = 888
       b   |   SYMBOL_INT
       i   |   SYMBOL_INT
     gdc   |   SYMBOL_INT
 CONST_5   |   SYMBOL_CST = 1
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: =, res:     b, right: CONST_3
id:    2, operator: =, res:     i, right: CONST_5
id:    3, IF     i <     a -> Goto -> QUAD     5
id:    4, Goto -> END
id:    5, Goto -> END
id:    6, Goto -> END
///////////////////
// end quad List
///////////////////
Cleaned 3 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 1
==40431== 
==40431== HEAP SUMMARY:
==40431==     in use at exit: 74 bytes in 4 blocks
==40431==   total heap usage: 53 allocs, 49 frees, 30,564 bytes allocated
==40431== 
==40431== LEAK SUMMARY:
==40431==    definitely lost: 48 bytes in 2 blocks
==40431==    indirectly lost: 24 bytes in 1 blocks
==40431==      possibly lost: 0 bytes in 0 blocks
==40431==    still reachable: 2 bytes in 1 blocks
==40431==         suppressed: 0 bytes in 0 blocks
==40431== Rerun with --leak-check=full to see details of leaked memory
==40431== 
==40431== For lists of detected and suppressed errors, rerun with: -s
==40431== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 600
PTC_a_:	.word 0
PTC_CONST_3_:	.word 888
PTC_b_:	.word 0
PTC_i_:	.word 0
PTC_gdc_:	.word 0
PTC_CONST_5_:	.word 1
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_2:
    lw $t0, PTC_CONST_5_
    sw $t0, PTC_i_
LABEL_Q_3:
    lw $t0, PTC_i_
    lw $t1, PTC_a_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_5
LABEL_Q_4:
    j LABEL_END
LABEL_Q_5:
    j LABEL_END
LABEL_Q_6:
    j LABEL_END
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.printi.txt

printi(4);
printi(6+2);
int a = 72;
printi(72);

==40436== Memcheck, a memory error detector
==40436== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40436== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40436== Command: ./binary/scalpa tests/test.printi.txt tests/test.printi.asm
==40436== 
Reading from tests/test.printi.txt.
Output will be saved to tests/test.printi.asm.
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 4
 CONST_3   |   SYMBOL_CST = 6
 CONST_5   |   SYMBOL_CST = 2
  TEMP_1   |   SYMBOL_INT
 CONST_7   |   SYMBOL_CST = 72
       a   |   SYMBOL_INT
 CONST_9   |   SYMBOL_CST = 72
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, PRINTI CONST_1
id:    1, operator: +, res: TEMP_1, left: CONST_3, right: CONST_5
id:    2, PRINTI TEMP_1
id:    3, operator: =, res:     a, right: CONST_7
id:    4, PRINTI CONST_9
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40436== 
==40436== HEAP SUMMARY:
==40436==     in use at exit: 0 bytes in 0 blocks
==40436==   total heap usage: 33 allocs, 33 frees, 30,269 bytes allocated
==40436== 
==40436== All heap blocks were freed -- no leaks are possible
==40436== 
==40436== For lists of detected and suppressed errors, rerun with: -s
==40436== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 4
PTC_CONST_3_:	.word 6
PTC_CONST_5_:	.word 2
PTC_TEMP_1_:	.word 0
PTC_CONST_7_:	.word 72
PTC_a_:	.word 0
PTC_CONST_9_:	.word 72
.text
main:
LABEL_Q_0:
    li $v0, 1
    lw $a0, PTC_CONST_1_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    lw $t1, PTC_CONST_5_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_1_
LABEL_Q_2:
    li $v0, 1
    lw $a0, PTC_TEMP_1_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_3:
    lw $t0, PTC_CONST_7_
    sw $t0, PTC_a_
LABEL_Q_4:
    li $v0, 1
    lw $a0, PTC_CONST_9_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.relops.txt

int a=5;
int b=3;
int c=100;

if(a>=b) b=10;
if(b>a) b=0;

if(b==0) c=200;
if(c!=100) a=c;

if(a<=c) a=500;
if(a<c) a=100;
// a comment

if(6<10)printi(1);
else printi(0);



==40441== Memcheck, a memory error detector
==40441== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40441== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40441== Command: ./binary/scalpa tests/test.relops.txt tests/test.relops.asm
==40441== 
Reading from tests/test.relops.txt.
Output will be saved to tests/test.relops.asm.
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 5
       a   |   SYMBOL_INT
 CONST_3   |   SYMBOL_CST = 3
       b   |   SYMBOL_INT
 CONST_5   |   SYMBOL_CST = 100
       c   |   SYMBOL_INT
 CONST_7   |   SYMBOL_CST = 10
 CONST_9   |   SYMBOL_CST = 0
CONST_11   |   SYMBOL_CST = 0
CONST_13   |   SYMBOL_CST = 200
CONST_15   |   SYMBOL_CST = 100
CONST_17   |   SYMBOL_CST = 500
CONST_19   |   SYMBOL_CST = 100
CONST_21   |   SYMBOL_CST = 6
CONST_23   |   SYMBOL_CST = 10
CONST_25   |   SYMBOL_CST = 1
CONST_27   |   SYMBOL_CST = 0
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, operator: =, res:     b, right: CONST_3
id:    2, operator: =, res:     c, right: CONST_5
id:    3, IF     a >=     b -> Goto -> QUAD     5
id:    4, Goto -> QUAD     6
id:    5, operator: =, res:     b, right: CONST_7
id:    6, IF     b >     a -> Goto -> QUAD     8
id:    7, Goto -> QUAD     9
id:    8, operator: =, res:     b, right: CONST_9
id:    9, IF     b == CONST_11 -> Goto -> QUAD    11
id:   10, Goto -> QUAD    12
id:   11, operator: =, res:     c, right: CONST_13
id:   12, IF     c != CONST_15 -> Goto -> QUAD    14
id:   13, Goto -> QUAD    15
id:   14, operator: =, res:     a, right:     c
id:   15, IF     a <=     c -> Goto -> QUAD    17
id:   16, Goto -> QUAD    18
id:   17, operator: =, res:     a, right: CONST_17
id:   18, IF     a <     c -> Goto -> QUAD    20
id:   19, Goto -> QUAD    21
id:   20, operator: =, res:     a, right: CONST_19
id:   21, IF CONST_21 < CONST_23 -> Goto -> QUAD    23
id:   22, Goto -> QUAD    25
id:   23, PRINTI CONST_25
id:   24, Goto -> END
id:   25, PRINTI CONST_27
///////////////////
// end quad List
///////////////////
Cleaned 1 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40441== 
==40441== HEAP SUMMARY:
==40441==     in use at exit: 0 bytes in 0 blocks
==40441==   total heap usage: 135 allocs, 135 frees, 32,641 bytes allocated
==40441== 
==40441== All heap blocks were freed -- no leaks are possible
==40441== 
==40441== For lists of detected and suppressed errors, rerun with: -s
==40441== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 5
PTC_a_:	.word 0
PTC_CONST_3_:	.word 3
PTC_b_:	.word 0
PTC_CONST_5_:	.word 100
PTC_c_:	.word 0
PTC_CONST_7_:	.word 10
PTC_CONST_9_:	.word 0
PTC_CONST_11_:	.word 0
PTC_CONST_13_:	.word 200
PTC_CONST_15_:	.word 100
PTC_CONST_17_:	.word 500
PTC_CONST_19_:	.word 100
PTC_CONST_21_:	.word 6
PTC_CONST_23_:	.word 10
PTC_CONST_25_:	.word 1
PTC_CONST_27_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_CONST_3_
    sw $t0, PTC_b_
LABEL_Q_2:
    lw $t0, PTC_CONST_5_
    sw $t0, PTC_c_
LABEL_Q_3:
    lw $t0, PTC_a_
    lw $t1, PTC_b_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_5
    beq $t0, $t1, LABEL_Q_5
LABEL_Q_4:
    j LABEL_Q_6
LABEL_Q_5:
    lw $t0, PTC_CONST_7_
    sw $t0, PTC_b_
LABEL_Q_6:
    lw $t0, PTC_b_
    lw $t1, PTC_a_
    slt $t2, $t1, $t0
    beq $t2, 1, LABEL_Q_8
LABEL_Q_7:
    j LABEL_Q_9
LABEL_Q_8:
    lw $t0, PTC_CONST_9_
    sw $t0, PTC_b_
LABEL_Q_9:
    lw $t0, PTC_b_
    lw $t1, PTC_CONST_11_
    beq $t0, $t1, LABEL_Q_11
LABEL_Q_10:
    j LABEL_Q_12
LABEL_Q_11:
    lw $t0, PTC_CONST_13_
    sw $t0, PTC_c_
LABEL_Q_12:
    lw $t0, PTC_c_
    lw $t1, PTC_CONST_15_
    bne $t0, $t1, LABEL_Q_14
LABEL_Q_13:
    j LABEL_Q_15
LABEL_Q_14:
    lw $t0, PTC_c_
    sw $t0, PTC_a_
LABEL_Q_15:
    lw $t0, PTC_a_
    lw $t1, PTC_c_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_17
    beq $t0, $t1, LABEL_Q_17
LABEL_Q_16:
    j LABEL_Q_18
LABEL_Q_17:
    lw $t0, PTC_CONST_17_
    sw $t0, PTC_a_
LABEL_Q_18:
    lw $t0, PTC_a_
    lw $t1, PTC_c_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_20
LABEL_Q_19:
    j LABEL_Q_21
LABEL_Q_20:
    lw $t0, PTC_CONST_19_
    sw $t0, PTC_a_
LABEL_Q_21:
    lw $t0, PTC_CONST_21_
    lw $t1, PTC_CONST_23_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_23
LABEL_Q_22:
    j LABEL_Q_25
LABEL_Q_23:
    li $v0, 1
    lw $a0, PTC_CONST_25_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_Q_24:
    j LABEL_END
LABEL_Q_25:
    li $v0, 1
    lw $a0, PTC_CONST_27_
    syscall
    li $v0, 0xB
    li $a0, 0xA
    syscall
LABEL_END:
    li $v0, 10
    syscall
-e 


-e tests/test.while.txt

int a = 0;
while(a < 100){
 if(a/2 == 1)
 a = a + 1;
 else
 a = a + 4;
}
int end = 200;

==40448== Memcheck, a memory error detector
==40448== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==40448== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==40448== Command: ./binary/scalpa tests/test.while.txt tests/test.while.asm
==40448== 
Reading from tests/test.while.txt.
Output will be saved to tests/test.while.asm.
///////////////////
// Symbol Table
///////////////////
 CONST_1   |   SYMBOL_CST = 0
       a   |   SYMBOL_INT
 CONST_3   |   SYMBOL_CST = 100
 CONST_5   |   SYMBOL_CST = 2
  TEMP_1   |   SYMBOL_INT
 CONST_7   |   SYMBOL_CST = 1
 CONST_9   |   SYMBOL_CST = 1
  TEMP_3   |   SYMBOL_INT
CONST_11   |   SYMBOL_CST = 4
  TEMP_5   |   SYMBOL_INT
CONST_13   |   SYMBOL_CST = 200
     end   |   SYMBOL_INT
///////////////////
// End Symbol Table
///////////////////
///////////////////
// quad List
///////////////////
id:    0, operator: =, res:     a, right: CONST_1
id:    1, IF     a < CONST_3 -> Goto -> QUAD     3
id:    2, Goto -> QUAD    12
id:    3, operator: /, res: TEMP_1, left:     a, right: CONST_5
id:    4, IF TEMP_1 == CONST_7 -> Goto -> QUAD     6
id:    5, Goto -> QUAD     9
id:    6, operator: +, res: TEMP_3, left:     a, right: CONST_9
id:    7, operator: =, res:     a, right: TEMP_3
id:    8, Goto -> QUAD     1
id:    9, operator: +, res: TEMP_5, left:     a, right: CONST_11
id:   10, operator: =, res:     a, right: TEMP_5
id:   11, Goto -> QUAD     1
id:   12, operator: =, res:   end, right: CONST_13
///////////////////
// end quad List
///////////////////
Cleaned 0 quad(s) with undefined branch
Cleaning...OK
YACC Exit code: 0
==40448== 
==40448== HEAP SUMMARY:
==40448==     in use at exit: 0 bytes in 0 blocks
==40448==   total heap usage: 71 allocs, 71 frees, 31,137 bytes allocated
==40448== 
==40448== All heap blocks were freed -- no leaks are possible
==40448== 
==40448== For lists of detected and suppressed errors, rerun with: -s
==40448== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
.data
PTC_CONST_1_:	.word 0
PTC_a_:	.word 0
PTC_CONST_3_:	.word 100
PTC_CONST_5_:	.word 2
PTC_TEMP_1_:	.word 0
PTC_CONST_7_:	.word 1
PTC_CONST_9_:	.word 1
PTC_TEMP_3_:	.word 0
PTC_CONST_11_:	.word 4
PTC_TEMP_5_:	.word 0
PTC_CONST_13_:	.word 200
PTC_end_:	.word 0
.text
main:
LABEL_Q_0:
    lw $t0, PTC_CONST_1_
    sw $t0, PTC_a_
LABEL_Q_1:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_3_
    slt $t2, $t0, $t1
    beq $t2, 1, LABEL_Q_3
LABEL_Q_2:
    j LABEL_Q_12
LABEL_Q_3:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_5_
    div $t0, $t1
    mflo $t2
    sw $t2, PTC_TEMP_1_
LABEL_Q_4:
    lw $t0, PTC_TEMP_1_
    lw $t1, PTC_CONST_7_
    beq $t0, $t1, LABEL_Q_6
LABEL_Q_5:
    j LABEL_Q_9
LABEL_Q_6:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_9_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_3_
LABEL_Q_7:
    lw $t0, PTC_TEMP_3_
    sw $t0, PTC_a_
LABEL_Q_8:
    j LABEL_Q_1
LABEL_Q_9:
    lw $t0, PTC_a_
    lw $t1, PTC_CONST_11_
    add $t2, $t0, $t1
    sw $t2, PTC_TEMP_5_
LABEL_Q_10:
    lw $t0, PTC_TEMP_5_
    sw $t0, PTC_a_
LABEL_Q_11:
    j LABEL_Q_1
LABEL_Q_12:
    lw $t0, PTC_CONST_13_
    sw $t0, PTC_end_
LABEL_END:
    li $v0, 10
    syscall
-e 



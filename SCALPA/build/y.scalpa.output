Terminaux inutilisés dans la grammaire

    IF
    ELSE
    WHILE
    FOR
    RETURN
    PRINTI
    TRUE
    FALSE
    OR
    AND
    NOT
    RELOP


Grammaire

    0 $accept: axiom $end

    1 axiom: PROGRAM IDENTIFIER BEGINPROG statement_list ENDPROG

    2 statement_list: statement_list statement
    3               | statement

    4 statement: assign_statement
    5          | declare_statement
    6          | expr_statement

    7 declare_statement: VAR IDENTIFIER DECL INT END
    8                  | VAR IDENTIFIER COMMA IDENTIFIER DECL INT END
    9                  | VAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER DECL INT END

   10 assign_statement: IDENTIFIER ASSIGN expr END

   11 expr_statement: expr END

   12 expr: IDENTIFIER
   13     | CONSTANT
   14     | '(' expr ')'
   15     | expr PLUS expr
   16     | expr MINUS expr
   17     | expr MULT expr
   18     | expr DIVI expr


Terminaux, suivis des règles où ils apparaissent

    $end (0) 0
    '(' (40) 14
    ')' (41) 14
    error (256)
    PROGRAM (258) 1
    VAR (259) 7 8 9
    DECL (260) 7 8 9
    COMMA (261) 8 9
    BEGINPROG (262) 1
    ENDPROG (263) 1
    INT (264) 7 8 9
    IF (265)
    ELSE (266)
    WHILE (267)
    FOR (268)
    RETURN (269)
    PRINTI (270)
    ASSIGN (271) 10
    PLUS (272) 15
    MINUS (273) 16
    MULT (274) 17
    DIVI (275) 18
    END (276) 7 8 9 10 11
    TRUE (277)
    FALSE (278)
    OR (279)
    AND (280)
    NOT (281)
    CONSTANT <value> (282) 13
    RELOP <value> (283)
    IDENTIFIER <string> (284) 1 7 8 9 10 12


Non-terminaux, suivis des règles où ils apparaissent

    $accept (32)
        à gauche: 0
    axiom (33)
        à gauche: 1
        à droite: 0
    statement_list <statementData> (34)
        à gauche: 2 3
        à droite: 1 2
    statement <statementData> (35)
        à gauche: 4 5 6
        à droite: 2 3
    declare_statement <statementData> (36)
        à gauche: 7 8 9
        à droite: 5
    assign_statement <statementData> (37)
        à gauche: 10
        à droite: 4
    expr_statement <statementData> (38)
        à gauche: 11
        à droite: 6
    expr <exprData> (39)
        à gauche: 12 13 14 15 16 17 18
        à droite: 10 11 14 15 16 17 18


État 0

    0 $accept: . axiom $end

    PROGRAM  décalage et aller à l'état 1

    axiom  aller à l'état 2


État 1

    1 axiom: PROGRAM . IDENTIFIER BEGINPROG statement_list ENDPROG

    IDENTIFIER  décalage et aller à l'état 3


État 2

    0 $accept: axiom . $end

    $end  décalage et aller à l'état 4


État 3

    1 axiom: PROGRAM IDENTIFIER . BEGINPROG statement_list ENDPROG

    BEGINPROG  décalage et aller à l'état 5


État 4

    0 $accept: axiom $end .

    $défaut  accepter


État 5

    1 axiom: PROGRAM IDENTIFIER BEGINPROG . statement_list ENDPROG

    VAR         décalage et aller à l'état 6
    CONSTANT    décalage et aller à l'état 7
    IDENTIFIER  décalage et aller à l'état 8
    '('         décalage et aller à l'état 9

    statement_list     aller à l'état 10
    statement          aller à l'état 11
    declare_statement  aller à l'état 12
    assign_statement   aller à l'état 13
    expr_statement     aller à l'état 14
    expr               aller à l'état 15


État 6

    7 declare_statement: VAR . IDENTIFIER DECL INT END
    8                  | VAR . IDENTIFIER COMMA IDENTIFIER DECL INT END
    9                  | VAR . IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER DECL INT END

    IDENTIFIER  décalage et aller à l'état 16


État 7

   13 expr: CONSTANT .

    $défaut  réduction par utilisation de la règle 13 (expr)


État 8

   10 assign_statement: IDENTIFIER . ASSIGN expr END
   12 expr: IDENTIFIER .

    ASSIGN  décalage et aller à l'état 17

    $défaut  réduction par utilisation de la règle 12 (expr)


État 9

   14 expr: '(' . expr ')'

    CONSTANT    décalage et aller à l'état 7
    IDENTIFIER  décalage et aller à l'état 18
    '('         décalage et aller à l'état 9

    expr  aller à l'état 19


État 10

    1 axiom: PROGRAM IDENTIFIER BEGINPROG statement_list . ENDPROG
    2 statement_list: statement_list . statement

    VAR         décalage et aller à l'état 6
    ENDPROG     décalage et aller à l'état 20
    CONSTANT    décalage et aller à l'état 7
    IDENTIFIER  décalage et aller à l'état 8
    '('         décalage et aller à l'état 9

    statement          aller à l'état 21
    declare_statement  aller à l'état 12
    assign_statement   aller à l'état 13
    expr_statement     aller à l'état 14
    expr               aller à l'état 15


État 11

    3 statement_list: statement .

    $défaut  réduction par utilisation de la règle 3 (statement_list)


État 12

    5 statement: declare_statement .

    $défaut  réduction par utilisation de la règle 5 (statement)


État 13

    4 statement: assign_statement .

    $défaut  réduction par utilisation de la règle 4 (statement)


État 14

    6 statement: expr_statement .

    $défaut  réduction par utilisation de la règle 6 (statement)


État 15

   11 expr_statement: expr . END
   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULT expr
   18     | expr . DIVI expr

    PLUS   décalage et aller à l'état 22
    MINUS  décalage et aller à l'état 23
    MULT   décalage et aller à l'état 24
    DIVI   décalage et aller à l'état 25
    END    décalage et aller à l'état 26


État 16

    7 declare_statement: VAR IDENTIFIER . DECL INT END
    8                  | VAR IDENTIFIER . COMMA IDENTIFIER DECL INT END
    9                  | VAR IDENTIFIER . COMMA IDENTIFIER COMMA IDENTIFIER DECL INT END

    DECL   décalage et aller à l'état 27
    COMMA  décalage et aller à l'état 28


État 17

   10 assign_statement: IDENTIFIER ASSIGN . expr END

    CONSTANT    décalage et aller à l'état 7
    IDENTIFIER  décalage et aller à l'état 18
    '('         décalage et aller à l'état 9

    expr  aller à l'état 29


État 18

   12 expr: IDENTIFIER .

    $défaut  réduction par utilisation de la règle 12 (expr)


État 19

   14 expr: '(' expr . ')'
   15     | expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULT expr
   18     | expr . DIVI expr

    PLUS   décalage et aller à l'état 22
    MINUS  décalage et aller à l'état 23
    MULT   décalage et aller à l'état 24
    DIVI   décalage et aller à l'état 25
    ')'    décalage et aller à l'état 30


État 20

    1 axiom: PROGRAM IDENTIFIER BEGINPROG statement_list ENDPROG .

    $défaut  réduction par utilisation de la règle 1 (axiom)


État 21

    2 statement_list: statement_list statement .

    $défaut  réduction par utilisation de la règle 2 (statement_list)


État 22

   15 expr: expr PLUS . expr

    CONSTANT    décalage et aller à l'état 7
    IDENTIFIER  décalage et aller à l'état 18
    '('         décalage et aller à l'état 9

    expr  aller à l'état 31


État 23

   16 expr: expr MINUS . expr

    CONSTANT    décalage et aller à l'état 7
    IDENTIFIER  décalage et aller à l'état 18
    '('         décalage et aller à l'état 9

    expr  aller à l'état 32


État 24

   17 expr: expr MULT . expr

    CONSTANT    décalage et aller à l'état 7
    IDENTIFIER  décalage et aller à l'état 18
    '('         décalage et aller à l'état 9

    expr  aller à l'état 33


État 25

   18 expr: expr DIVI . expr

    CONSTANT    décalage et aller à l'état 7
    IDENTIFIER  décalage et aller à l'état 18
    '('         décalage et aller à l'état 9

    expr  aller à l'état 34


État 26

   11 expr_statement: expr END .

    $défaut  réduction par utilisation de la règle 11 (expr_statement)


État 27

    7 declare_statement: VAR IDENTIFIER DECL . INT END

    INT  décalage et aller à l'état 35


État 28

    8 declare_statement: VAR IDENTIFIER COMMA . IDENTIFIER DECL INT END
    9                  | VAR IDENTIFIER COMMA . IDENTIFIER COMMA IDENTIFIER DECL INT END

    IDENTIFIER  décalage et aller à l'état 36


État 29

   10 assign_statement: IDENTIFIER ASSIGN expr . END
   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULT expr
   18     | expr . DIVI expr

    PLUS   décalage et aller à l'état 22
    MINUS  décalage et aller à l'état 23
    MULT   décalage et aller à l'état 24
    DIVI   décalage et aller à l'état 25
    END    décalage et aller à l'état 37


État 30

   14 expr: '(' expr ')' .

    $défaut  réduction par utilisation de la règle 14 (expr)


État 31

   15 expr: expr . PLUS expr
   15     | expr PLUS expr .
   16     | expr . MINUS expr
   17     | expr . MULT expr
   18     | expr . DIVI expr

    MULT  décalage et aller à l'état 24
    DIVI  décalage et aller à l'état 25

    $défaut  réduction par utilisation de la règle 15 (expr)


État 32

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   16     | expr MINUS expr .
   17     | expr . MULT expr
   18     | expr . DIVI expr

    MULT  décalage et aller à l'état 24
    DIVI  décalage et aller à l'état 25

    $défaut  réduction par utilisation de la règle 16 (expr)


État 33

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULT expr
   17     | expr MULT expr .
   18     | expr . DIVI expr

    $défaut  réduction par utilisation de la règle 17 (expr)


État 34

   15 expr: expr . PLUS expr
   16     | expr . MINUS expr
   17     | expr . MULT expr
   18     | expr . DIVI expr
   18     | expr DIVI expr .

    $défaut  réduction par utilisation de la règle 18 (expr)


État 35

    7 declare_statement: VAR IDENTIFIER DECL INT . END

    END  décalage et aller à l'état 38


État 36

    8 declare_statement: VAR IDENTIFIER COMMA IDENTIFIER . DECL INT END
    9                  | VAR IDENTIFIER COMMA IDENTIFIER . COMMA IDENTIFIER DECL INT END

    DECL   décalage et aller à l'état 39
    COMMA  décalage et aller à l'état 40


État 37

   10 assign_statement: IDENTIFIER ASSIGN expr END .

    $défaut  réduction par utilisation de la règle 10 (assign_statement)


État 38

    7 declare_statement: VAR IDENTIFIER DECL INT END .

    $défaut  réduction par utilisation de la règle 7 (declare_statement)


État 39

    8 declare_statement: VAR IDENTIFIER COMMA IDENTIFIER DECL . INT END

    INT  décalage et aller à l'état 41


État 40

    9 declare_statement: VAR IDENTIFIER COMMA IDENTIFIER COMMA . IDENTIFIER DECL INT END

    IDENTIFIER  décalage et aller à l'état 42


État 41

    8 declare_statement: VAR IDENTIFIER COMMA IDENTIFIER DECL INT . END

    END  décalage et aller à l'état 43


État 42

    9 declare_statement: VAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER . DECL INT END

    DECL  décalage et aller à l'état 44


État 43

    8 declare_statement: VAR IDENTIFIER COMMA IDENTIFIER DECL INT END .

    $défaut  réduction par utilisation de la règle 8 (declare_statement)


État 44

    9 declare_statement: VAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER DECL . INT END

    INT  décalage et aller à l'état 45


État 45

    9 declare_statement: VAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER DECL INT . END

    END  décalage et aller à l'état 46


État 46

    9 declare_statement: VAR IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER DECL INT END .

    $défaut  réduction par utilisation de la règle 9 (declare_statement)
